<boltArtifact id="template-angular" title="template-angular">
<boltAction type="file" filePath="tailwind.config.ts">
import { Config } from 'tailwindcss';

const config: Config = {
  darkMode: 'class',
  mode: 'jit',
  content: [
    './src/**/*.{html,ts}',  // Updated for Angular
  ],
  theme: {
    extend: {
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      colors: {
        title: '#0C1D2E',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        temp: {
          DEFAULT: 'rgb(var(--theme-primary) / <alpha-value>)',
          foreground: "#FFFFFF",
        },
        temp_hover: {
          DEFAULT: "#00B0C9",
          foreground: "#FFFFFF",
        },
        tempSec: {
          DEFAULT: "#0C1D2E",
          foreground: "#E6F3F8",
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
      },
    },
  },
  layers: {
    'no-tailwindcss': {
      '.no-tailwindcss': {
        all: 'unset',
      }
    }
  },
  plugins: [require("tailwindcss-animate"), require('@tailwindcss/typography')],
} as Config;

export default config; 
</boltAction>

<boltAction type="file" filePath="src/index.html">
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>TemplateAngular</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
  <app-root></app-root>
</body>
</html>

</boltAction>

<boltAction type="file" filePath="src/main.ts">
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));

</boltAction>

<boltAction type="file" filePath="src/styles.css">
/* You can add global styles to this file, and also import other style files */
@tailwind base;
@tailwind components;
@tailwind utilities;

@import "tailwindcss";


@layer base {
    :root {
      --temp: #FFFFFF;
      --temp-back: #00B0B9;
      --temp-sec: #FFFFFF;
      --temp-sec-back: #171717;
      --current-font-back: 'inter', serif;
  
      --background: 0 0% 100%;
      --foreground: 0 0% 3.9%;
      --card: 0 0% 100%;
      --card-foreground: 0 0% 3.9%;
      --popover: 0 0% 100%;
      --popover-foreground: 0 0% 3.9%;
      --primary: 0 0% 9%;
      --primary-foreground: 0 0% 98%;
      --secondary: 0 0% 96.1%;
      --secondary-foreground: 0 0% 9%;
      --muted: 0 0% 96.1%;
      --muted-foreground: 0 0% 45.1%;
      --accent: 0 0% 96.1%;
      --accent-foreground: 0 0% 9%;
      --destructive: 0 84.2% 60.2%;
      --destructive-foreground: 0 0% 98%;
      --border: 0 0% 89.8%;
      --input: 0 0% 89.8%;
      --ring: 0 0% 3.9%;
      --chart-1: 12 76% 61%;
      --chart-2: 173 58% 39%;
      --chart-3: 197 37% 24%;
      --chart-4: 43 74% 66%;
      --chart-5: 27 87% 67%;
      --radius: 0.5rem;
    }
  
    .dark {
      --background: 0 0% 3.9%;
      --foreground: 0 0% 98%;
      --card: 0 0% 3.9%;
      --card-foreground: 0 0% 98%;
      --popover: 0 0% 3.9%;
      --popover-foreground: 0 0% 98%;
      --primary: 0 0% 98%;
      --primary-foreground: 0 0% 9%;
      --secondary: 0 0% 14.9%;
      --secondary-foreground: 0 0% 98%;
      --muted: 0 0% 14.9%;
      --muted-foreground: 0 0% 63.9%;
      --accent: 0 0% 14.9%;
      --accent-foreground: 0 0% 98%;
      --destructive: 0 62.8% 30.6%;
      --destructive-foreground: 0 0% 98%;
      --border: 0 0% 14.9%;
      --input: 0 0% 14.9%;
      --ring: 0 0% 83.1%;
      --chart-1: 220 70% 50%;
      --chart-2: 160 60% 45%;
      --chart-3: 30 80% 55%;
      --chart-4: 280 65% 60%;
      --chart-5: 340 75% 55%;
    }
  
    /* * {
      @apply border-border;
    }
  
    body {
      @apply bg-background text-foreground;
      font-family: var(--current-font-back);
      font-weight: 500;
    } */
  }
  
  html {
    font-family: "DM Sans", sans-serif;
    font-weight: 500;
    scroll-behavior: smooth;
  }
  
  
  
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: var(--temp-back) #748BA026;
  }
  
  
  .custom-scrollbar::-webkit-scrollbar {
    width: 2px;
    height: 2px; 
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: #748BA026; 
    border-radius: 8px; 
  }
  
  .custom-scrollbar::-webkit-scrollbar-track {
    background: var(--temp-back); 
  }
  
  
  .custom-scrollbar::-webkit-scrollbar-button {
    display: none;
  }
  
  
  @supports (-ms-overflow-style: none) {
    .custom-scrollbar {
      -ms-overflow-style: -ms-autohiding-scrollbar; 
    }
  }
  
  
  .custom-scrollbar::-webkit-scrollbar {
    display: none; 
  }
  
  .custom-scrollbar:hover::-webkit-scrollbar {
    display: block; 
  }
  
  
  input[type='radio'] {
    accent-color: var(--temp-back);
  }
  
  input[type="checkbox"] {
    accent-color: var(--temp-back);
  }
  
  
  .custom-input::-webkit-outer-spin-button,
  .custom-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
  }
  
  .custom-input::-webkit-outer-spin-button,
  .custom-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0; 
  }
  
  .custom-input[type="number"] {
    -moz-appearance: textfield;
  }
  
  .custom-tooltip {
    background-color: white !important;
    color: black !important;
    opacity: 1 !important; 
    border-radius: 10px !important;
    border: 1px solid #ccc !important;
    justify-content: center;
    z-index: 999;
  }
  
</boltAction>

<boltAction type="file" filePath="src/app/app.component.ts">
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { FooterComponent } from './components/Footer/footer.component';
import { HeaderComponent } from './components/header/header.component';
import { ThemeService } from './services/theme.service';
import { ToastComponent } from './components/ui/toast/toast.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, HeaderComponent, FooterComponent, ToastComponent],
  template: `
    <app-header></app-header>
    <router-outlet></router-outlet>
    <app-footer></app-footer>
    <app-toast />
  `
})  
export class AppComponent {
  title = 'template-angular';
  restaurantId = 'hi thgere ';
  constructor(private themeService: ThemeService) {
    this.themeService.initializeTheme();
  }
}
</boltAction>

<boltAction type="file" filePath="src/app/app.config.ts">
import { ApplicationConfig, importProvidersFrom } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';
import { routes } from './app.routes';
import { storeConfig } from './store/store.config';
import { provideAnimations } from '@angular/platform-browser/animations';
import { ToastService } from './services/toast.service';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient(),
    ...storeConfig,
    provideAnimations(),
    ToastService,
  ]
};

</boltAction>

<boltAction type="file" filePath="src/app/app.routes.ts">
import { Routes } from '@angular/router';
import { BestsellerComponent } from './pages/bestseller/bestseller.component';
import { CartSummaryComponent } from './pages/checkout/checkout.component';
export const routes: Routes = [
  { path: '', component: BestsellerComponent },
  { path: 'checkout', component: CartSummaryComponent },
];
</boltAction>

<boltAction type="file" filePath="src/environments/environment.ts">
export const environment = {
  production: false,
  DOMAIN: 'https://productionapp.petpooja.site',
  API_URL: 'https://themeonestaging.petpooja.com/api'
  // API_URL: 'http://localhost:8080/api'
};  
</boltAction>

<boltAction type="file" filePath="src/app/icons/cartpop-icons.component.ts">
import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CartService } from '../services/cart.service';

@Component({
  selector: 'app-cart-icon',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="relative cursor-pointer">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9 22C9.55228 22 10 21.5523 10 21C10 20.4477 9.55228 20 9 20C8.44772 20 8 20.4477 8 21C8 21.5523 8.44772 22 9 22Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M20 22C20.5523 22 21 21.5523 21 21C21 20.4477 20.5523 20 20 20C19.4477 20 19 20.4477 19 21C19 21.5523 19.4477 22 20 22Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M1 1H5L7.68 14.39C7.77144 14.8504 8.02191 15.264 8.38755 15.5583C8.75318 15.8526 9.2107 16.009 9.68 16H19.4C19.8693 16.009 20.3268 15.8526 20.6925 15.5583C21.0581 15.264 21.3086 14.8504 21.4 14.39L23 6H6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>

      @if (cartCount$ | async; as count) {
        @if (count > 0) {
          <div class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full min-w-[18px] h-[18px] flex items-center justify-center text-xs font-medium">
            {{ count }}
          </div>
        }
      }
    </div>
  `,
  styles: [`
    :host {
      display: inline-block;
    }
  `]
})
export class CartIconComponent {
  private cartService = inject(CartService);
  cartCount$ = this.cartService.cartCount$;
} 

@Component({
  selector: 'item-note-icon',
  standalone: true,
  template: `
   <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                <polyline points="14 2 14 8 20 8"></polyline>
                                <line x1="16" y1="13" x2="8" y2="13"></line>
                                <line x1="16" y1="17" x2="8" y2="17"></line>
                                <polyline points="10 9 9 9 8 9"></polyline>
                              </svg>
  `
})
export class ItemNoteIconComponent {}

@Component({
  selector: 'item-delete-icon',
  standalone: true,
  template: `
   <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <polyline points="3 6 5 6 21 6"></polyline>
                                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                <line x1="10" y1="11" x2="10" y2="17"></line>
                                <line x1="14" y1="11" x2="14" y2="17"></line>
                              </svg> 
  `
})
export class ItemDeleteIconComponent {}
</boltAction>

<boltAction type="file" filePath="src/app/icons/contact-icons.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-email-icon',
  standalone: true,
  template: `
    <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
      <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
    </svg>
  `
})
export class EmailIconComponent {}

@Component({
  selector: 'app-phone-icon',
  standalone: true,
  template: `
    <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
      <path d="M6.62 10.79c1.44 2.83 3.76 5.15 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
    </svg>
  `
})
export class PhoneIconComponent {}

@Component({
  selector: 'app-location-icon',
  standalone: true,
  template: `
    <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
      <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
    </svg>
  `
})
export class LocationIconComponent {}

@Component({
  selector: 'app-clock-icon',
  standalone: true,
  template: `
    <svg class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
      <path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"/>
      <path d="M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"/>
    </svg>
  `
})
export class ClockIconComponent {}

</boltAction>

<boltAction type="file" filePath="src/app/icons/foodcard-icons.component.ts">
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-heart-icon',
  standalone: true,
  template: `
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="25" viewBox="0 0 24 25" fill="none" class="cursor-pointer">
      <path d="M20.8405 4.77676C20.3297 4.26576 19.7233 3.8604 19.0558 3.58384C18.3884 3.30728 17.673 3.16493 16.9505 3.16493C16.228 3.16493 15.5126 3.30728 14.8451 3.58384C14.1777 3.8604 13.5712 4.26576 13.0605 4.77676L12.0005 5.83676L10.9405 4.77676C9.90879 3.74507 8.50952 3.16547 7.05049 3.16547C5.59145 3.16547 4.19218 3.74507 3.16049 4.77676C2.12879 5.80845 1.54919 7.20772 1.54919 8.66676C1.54919 10.1258 2.12879 11.5251 3.16049 12.5568L4.22048 13.6168L12.0005 21.3968L19.7805 13.6168L20.8405 12.5568C21.3515 12.046 21.7568 11.4396 22.0334 10.7721C22.31 10.1047 22.4523 9.38925 22.4523 8.66676C22.4523 7.94427 22.31 7.22886 22.0334 6.5614C21.7568 5.89394 21.3515 5.28751 20.8405 4.77676V4.77676Z" 
        [attr.stroke]="filled ? 'red' : 'currentColor'" 
        [attr.fill]="filled ? 'red' : 'none'"
        stroke-width="1.3" 
        stroke-linecap="round" 
        stroke-linejoin="round">
      </path>
    </svg>
  `
})
export class HeartIconComponent {
  @Input() filled: boolean = false;
}

@Component({
  selector: 'app-veg-icon',
  standalone: true,
  template: `
    <div class="h-4 w-4 border border-green-600 flex items-center justify-center cursor-pointer">
      <div class="h-2 w-2 bg-green-600 rounded-full"></div>
    </div>
  `
})
export class VegIconComponent {}

@Component({
  selector: 'app-info-arrow-icon',
  standalone: true,
  template: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
      <path fill-rule="evenodd" clip-rule="evenodd" d="M5.00356 13.4C4.73189 13.1333 4.73189 12.7008 5.00356 12.4341L9.52035 7.99998L5.00356 3.5658C4.73189 3.29911 4.73189 2.8667 5.00356 2.6C5.27523 2.3333 5.71569 2.3333 5.98736 2.6L10.9961 7.51707C11.2677 7.78377 11.2677 8.21618 10.9961 8.48288L5.98736 13.4C5.71569 13.6667 5.27523 13.6667 5.00356 13.4Z" 
        fill="#0C1D2E">
      </path>
    </svg>
  `
})
export class InfoArrowIconComponent {}

@Component({
  selector: 'app-minus-icon',
  standalone: true,
  template: `
    <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 448 512" 
      class="text-[var(--temp-back)] hover:text-white border-[var(--temp-back)] border bg-white hover:bg-[var(--temp-back)] p-1 rounded-full cursor-pointer"
      height="25" width="25">
      <path d="M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z"></path>
    </svg>
  `
})
export class MinusIconComponent {}

@Component({
  selector: 'app-plus-icon',
  standalone: true,
  template: `
    <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 512 512" 
      class="text-[var(--temp-back)] hover:text-white border-[var(--temp-back)] border bg-white hover:bg-[var(--temp-back)] p-1 rounded-full cursor-pointer"
      height="25" width="25">
      <path d="M416 277.333H277.333V416h-42.666V277.333H96v-42.666h138.667V96h42.666v138.667H416v42.666z"></path>
    </svg>
  `
})
export class PlusIconComponent {} 
</boltAction>

<boltAction type="file" filePath="src/app/icons/io-md-add.component.ts">
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'i-io-md-add',
  standalone: true,
  imports: [CommonModule],
  template: `
    <svg 
      [attr.width]="size" 
      [attr.height]="size" 
      viewBox="0 0 512 512"
      [style.width.px]="size"
      [style.height.px]="size"
      [class]="class"
    >
      <path 
        d="M256 48C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48zm90.5 224H272v74.5c0 8.8-7.2 16-16 16-4.4 0-8.4-1.8-11.3-4.7-2.9-2.9-4.7-6.9-4.7-11.3V272h-74.5c-4.4 0-8.4-1.8-11.3-4.7-2.9-2.9-4.7-6.9-4.7-11.3 0-8.8 7.2-16 16-16H240v-74.5c0-8.8 7.2-16 16-16s16 7.2 16 16V240h74.5c8.8 0 16 7.2 16 16s-7.2 16-16 16z"
        fill="currentColor"
      />
    </svg>
  `
})
export class IoMdAddComponent {
  @Input() size: number = 24;
  @Input() class: string = '';
} 
</boltAction>

<boltAction type="file" filePath="src/app/icons/social-icons.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-facebook-icon',
  standalone: true,
  template: `
    <svg class="w-8 h-8" viewBox="0 0 320 512" fill="currentColor">
      <path d="M279.14 288l14.22-92.66h-88.91v-60.13c0-25.35 12.42-50.06 52.24-50.06h40.42V6.26S260.43 0 225.36 0c-73.22 0-121.08 44.38-121.08 124.72v70.62H22.89V288h81.39v224h100.17V288z"/>
    </svg>
  `
})
export class FacebookIconComponent {}

@Component({
  selector: 'app-twitter-x-icon',
  standalone: true,
  template: `
    <svg class="w-7 h-7" viewBox="0 0 512 512" fill="currentColor">
      <path d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z"/>
    </svg>
  `
})
export class TwitterXIconComponent {}

@Component({
  selector: 'app-instagram-icon',
  standalone: true,
  template: `
    <svg class="w-7 h-7" viewBox="0 0 448 512" fill="currentColor">
      <path d="M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z"/>
    </svg>
  `
})
export class InstagramIconComponent {}

@Component({
  selector: 'app-linkedin-icon',
  standalone: true,
  template: `
    <svg class="w-8 h-8" viewBox="0 0 448 512" fill="currentColor">
      <path d="M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z"/>
    </svg>
  `
})
export class LinkedinIconComponent {}

@Component({
  selector: 'app-youtube-icon',
  standalone: true,
  template: `
    <svg class="w-7 h-7" viewBox="0 0 576 512" fill="currentColor">
      <path d="M549.655 124.083c-6.281-23.65-24.787-42.276-48.284-48.597C458.781 64 288 64 288 64S117.22 64 74.629 75.486c-23.497 6.322-42.003 24.947-48.284 48.597-11.412 42.867-11.412 132.305-11.412 132.305s0 89.438 11.412 132.305c6.281 23.65 24.787 41.5 48.284 47.821C117.22 448 288 448 288 448s170.78 0 213.371-11.486c23.497-6.321 42.003-24.171 48.284-47.821 11.412-42.867 11.412-132.305 11.412-132.305s0-89.438-11.412-132.305zm-317.51 213.508V175.185l142.739 81.205-142.739 81.201z"/>
    </svg>
  `
})
export class YoutubeIconComponent {}

@Component({
  selector: 'app-pinterest-icon',
  standalone: true,
  template: `
    <svg class="w-8 h-8" viewBox="0 0 496 512" fill="currentColor">
      <path d="M496 256c0 137-111 248-248 248-25.6 0-50.2-3.9-73.4-11.1 10.1-16.5 25.2-43.5 30.8-65 3-11.6 15.4-59 15.4-59 8.1 15.4 31.7 28.5 56.8 28.5 74.8 0 128.7-68.8 128.7-154.3 0-81.9-66.9-143.2-152.9-143.2-107 0-163.9 71.8-163.9 150.1 0 36.4 19.4 81.7 50.3 96.1 4.7 2.2 7.2 1.2 8.3-3.3.8-3.4 5-20.3 6.9-28.1.6-2.5.3-4.7-1.7-7.1-10.1-12.5-18.3-35.3-18.3-56.6 0-54.7 41.4-107.6 112-107.6 60.9 0 103.6 41.5 103.6 100.9 0 67.1-33.9 113.6-78 113.6-24.3 0-42.6-20.1-36.7-44.8 7-29.5 20.5-61.3 20.5-82.6 0-19-10.2-34.9-31.4-34.9-24.9 0-44.9 25.7-44.9 60.2 0 22 7.4 36.8 7.4 36.8s-24.5 103.8-29 123.2c-5 21.4-3 51.6-.9 71.2C65.4 450.9 0 357.5 0 256 0 119 111 8 248 8s248 111 248 248z"/>
    </svg>
  `
})
export class PinterestIconComponent {}
</boltAction>

<boltAction type="file" filePath="src/app/interfaces/cart.interface.ts">
export interface CartItem {
  _id: string;
  userId: string;
  storeId: string;
  quantity: number;
  notes: string;
  item_id: string;
  variation: string;
  addons: string[];
  createdAt: string;
  updatedAt: string;
  addons_details: any[];
  items_details: {
    _id: string;
    item_id: string;
    item_name: string;
    item_image_url: string;
    price: string;
    variation: {
      id: string;
      name?: string;
    };
    [key: string]: any;
  };
  total: number;
}

export interface CartResponse {
  results: CartItem[];
  message: string;
  code: number;
}

export interface OrderNotesResponse {
  results: {
    minimum_prep_time: {
      num: string;
      time: string;
    };
    minimum_delivery_time: {
      num: string;
      time: string;
    };
    _id: string;
    userId: string;
    storeId: string;
    orderId: string;
    order_type: string;
    order_status: string;
    notes: string;
    is_modified: string;
    paymentDetails: {
      refunded: boolean;
    };
    cartItems: any[];
    createdAt: string;
    updatedAt: string;
  };
  message: string;
  code: number;
} 
</boltAction>

<boltAction type="file" filePath="src/app/interfaces/food.interface.ts">
export interface Nutrition {
  [key: string]: {
    unit: string;
    amount: number;
  };
}

export interface VariationAddon {
  addon_group_id: string;
  addon_item_selection_min: string;
  addon_item_selection_max: string;
  _id: string;
}

export interface AddonItem {
  _id: string;
  addonitemid: string;
  addonitem_name: string;
  addonitem_price: string;
  active: string;
  attributes: string;
  addonitem_rank: string;
}

export interface AddonGroup {
  _id: string;
  addon_group_id: string;
  addon_group_name: string;
  addon_group_rank: string;
  addon_group_items: AddonItem[];
  menu_sharing_code: string;
  store_id: string;
  active: string;
  variation_ids?: string[];
}

export interface AddonSelection {
  _id: string;
  addon_group_id: string;
  addon_item_selection_min: string;
  addon_item_selection_max: string;
}

export interface Variation {
  id: string;
  variationid: string;
  name: string;
  groupname: string;
  price: string;
  active: string;
  item_packingcharges: string;
  variationrank: string;
  variationallowaddon: number;
  addon?: AddonSelection;
  _id: string;
}

export interface AddonGroupItem {
  addonitemid: string;
  addonitem_name: string;
  addonitem_price: string;
  active: string;
  attributes: string;
  addonitem_rank: string;
  _id: string;
}

export interface AddonDetail {
  addon_group_id: string;
  addon_group_name: string;
  addon_group_rank: string;
  addon_group_items: AddonGroupItem[];
  menu_sharing_code: string;
  store_id: string;
  _id: string;
  __v: number;
  active: string;
  variation_ids?: string[];
}

export interface FoodItem {
  _id: string;
  item_id: string;
  active: string;
  __v: number;
  createdAt: string;
  updatedAt: string;
  cuisine: any[];
  gst_type: string;
  ignore_discounts: string;
  ignore_taxes: string;
  in_stock: string;
  item_allow_variation: string;
  item_attribute_id: string;
  item_category_id: string;
  item_description: string;
  item_image_url: string;
  item_name: string;
  item_ordertype: string;
  item_packing_charges: string;
  item_rank: string;
  item_tax: string;
  menu_sharing_code: string;
  nutrition: string | Nutrition;
  price: string;
  store_id: string;
  addon: Array<{
    _id: string;
    addon_group_id: string;
    addon_item_selection_max: string;
    addon_item_selection_min: string;
  }>;
  addonDetails: AddonDetail[];
  variation: Variation[];
  variationAddonDetails: AddonDetail[];
} 



</boltAction>

<boltAction type="file" filePath="src/app/interfaces/theme.interface.ts">
export interface ThemeColors {
  primary: string;
  secondary: string;
}

export interface ThemeData {
  _id: string;
  themeId: string;
  Logo: string;
  showName: boolean;
  Favicon: string;
  HeroImg: string;
  previousHeroImg: string[];
  homePageBanner: {
    Active: string[];
    Previous: string[];
  };
  font: string;
  colors: {
    reset: ColorScheme;
    current: ColorScheme;
  };
}

interface ColorScheme {
  primary: string;
  secondary: string;
}

export interface StoreLocation {
  lat: string;
  lng: string;
}

export interface StoreDetails {
  _id: string;
  store_id: string;
  domain: string;
  menusharingcode: string;
  name: string;
  state: {
    id: string;
    name: string;
    countryId: string;
  };
  town: {
    id: string;
    name: string;
    stateId: string;
  };
  country: {
    id: string;
    name: string;
    countryPhoneCode: string;
    currency: string;
    isoAlpha2CountryCode: string;
    currencyHtml: string;
  };
  store_mobile: {
    value: string;
    valid: boolean;
  };
  store_email: {
    value: string;
    valid: boolean;
  };
  address_line: string;
  timezone: {
    id: string;
    name: string;
    countryId: string;
  };
}

export interface ApiResponse {
  results: {
    theme: ThemeData;
    store: StoreDetails;
    social: Social;
    pages: Pages;
    timing: Timing;
    domainPages: DomainPage[];
  };
  message: string;
  code: number;
}

export interface ThemeState {
  theme: ThemeData | null;
  store: StoreDetails | null;
  loading: boolean;
  error: string | null;
}

export interface Social {
  Social: {
    facebook: string;
    linkedin: string;
    x: string;
    instagram: string;
    Youtube: string;
    Pinterest: string;
  };
  app: {
    ios: string;
    android: string;
  };
  _id: string;
  StoreId: string;
  Title: string;
  Description: string;
  Img: string;
}

export interface Pages {
  _id: string;
  store_id: string;
  policies: string;
  condition: string;
  refund: string;
}

export interface Timing {
  _id: string;
  storeId: string;
  isDelivery: boolean;
  currentDay: boolean;
  totalNumber: string;
  sunday: TimeSlot[];
  monday: TimeSlot[];
  tuesday: TimeSlot[];
  wednesday: TimeSlot[];
  thursday: TimeSlot[];
  friday: TimeSlot[];
  saturday: TimeSlot[];
  [key: string]: any;
}

interface TimeSlot {
  from: string;
  to: string;
  _id: string;
}

export interface DomainPage {
  _id: string;
  domainId: string;
  title: string;
  status: string;
  createdAt: string;
  updatedAt: string;
} 
</boltAction>

<boltAction type="file" filePath="src/app/services/auth.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, tap, BehaviorSubject } from 'rxjs';
import { Store } from '@ngrx/store';
import { AuthActions } from '../store/slices/auth.slice';

export interface UserAddress {
  _id: string;
  details: {
    address: string;
    id: string;
    location: {
      lat: number;
      lng: number;
    };
    houseFloor: string;
    buildingName: string;
  };
  addressString: string;
  type: string;
  isActive: boolean;
}

export interface User {
  _id: string;
  userCodeId: string;
  phone: string;
  countryCode: string;
  address: UserAddress[];
}

export interface AuthResponse {
  results: {
    token: string;
    user: User;
  };
  message: string;
  code: number;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private readonly API_URL = 'https://themeonestaging.petpooja.com/api/auth';
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);
  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();

  constructor(
    private http: HttpClient,
    private store: Store
  ) {}

  isAuthenticated(): boolean {
    return this.isAuthenticatedSubject.value;
  }

  login(countryCode: string, phone: string): Observable<any> {
    this.store.dispatch(AuthActions.setPhone({ phone, countryCode }));
    return this.http.post(`${this.API_URL}/login`, { countryCode, phone });
  }

  verifyOtp(countryCode: string, phone: string, token: string): Observable<AuthResponse> {
    return this.http.post<AuthResponse>(`${this.API_URL}/verify`, {
      countryCode,
      phone,
      token
    }).pipe(
      tap(response => {
        if (response.results?.token) {
          localStorage.setItem('token', response.results.token);
          this.store.dispatch(AuthActions.setUser({ user: response.results.user }));
        }
      })
    );
  }

  logout() {
    localStorage.removeItem('token');
    this.store.dispatch(AuthActions.clearAuth());
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/services/cart-popup.service.ts">
import { Injectable, signal, inject } from '@angular/core';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class CartPopupService {
  private authService = inject(AuthService);
  isOpen = signal(false);

  constructor() {
    // Close cart popup when user logs out
    this.authService.isAuthenticated$.subscribe((isAuthenticated: boolean) => {
      if (!isAuthenticated) {
        this.close();
      }
    });

    // Add global click listener
    document.addEventListener('click', (event: MouseEvent) => {
      const target = event.target as HTMLElement;
      // Only close if clicking outside cart popup and not on the trigger button
      if (this.isOpen() && 
          !target.closest('.cart-popup-content') && 
          !target.closest('.cart-trigger')) {
        this.close();
      }
    });
  }

  toggle() {
    // if (!this.isOpen() && !this.authService.isAuthenticated()) {
    //   // Don't open if not authenticated
    //   return;
    // }
    this.isOpen.update(value => !value);
  }

  open() {
    if (this.authService.isAuthenticated()) {
      this.isOpen.set(true);
    }
  }

  close() {
    this.isOpen.set(false);
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/services/cart.service.ts">
import { Injectable, inject } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment } from '../../environments/environment';
import { Observable } from 'rxjs';
import { CartResponse, OrderNotesResponse } from '../interfaces/cart.interface';
import { BehaviorSubject, Subject, switchMap, tap } from 'rxjs';
import { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';
import { ThemeService } from './theme.service';
import { AddonGroupItem, FoodItem } from '../interfaces/food.interface';
import { ToastService } from './toast.service';

@Injectable({
  providedIn: 'root'
})
export class CartService {
  private http = inject(HttpClient);
  private themeService = inject(ThemeService);
  private toast = inject(ToastService);
  private baseUrl = environment.API_URL;
  
  private notesSubject = new Subject<{itemId: string, notes: string}>();
  public cartItemsSubject = new BehaviorSubject<any[]>([]);
  private cartCountSubject = new BehaviorSubject<number>(0);

  cartItems$ = this.cartItemsSubject.asObservable();
  cartCount$ = this.cartCountSubject.asObservable();
  
  storeId: string = '';
  constructor() {
    this.notesSubject.pipe(
      debounceTime(300),
      distinctUntilChanged(),
      switchMap(({itemId, notes}) => this.updateItemNotes(itemId, notes))
    ).subscribe();

    this.themeService.getStore().subscribe(store => {
      if (store?.store_id) {
        this.storeId = store.store_id;
      }
    });
  }

  // Add to cart sequence
  addToCart(item: FoodItem, variation: string = '', addons: AddonGroupItem[] = [], notes: string = '') {
    const payload = {
      storeId: this.storeId,
      item_id: item.item_id,
      variation: variation,
      quantity: 1,
      addons: addons,
      notes: notes
    };

    return this.http.post(`${this.baseUrl}/user/add_item_to_cart`, payload, {
      headers: this.getHeaders()
    }).pipe(
      switchMap(() => this.getCartItems()),
      tap(() => this.getCartCount().subscribe()),
      tap(() => this.toast.success('Item added to cart'))
    );
  }

  // Update quantity sequence
  updateQuantity(cartProductId: string, quantity: number): Observable<any> {
    const payload = {
      storeId: this.storeId,
      cartProductId,
      quantity
    };

    return this.http.patch(`${this.baseUrl}/user/change_product_quantity`, payload, {
      headers: this.getHeaders()
    }).pipe(
      // switchMap(() => this.getCartItems()),
      // tap(() => this.getCartCount().subscribe())
      tap(() => this.refreshCartData()),
      tap(() => this.toast.success('Quantity updated'))
    );
  }

  getItemCart(storeId: string): Observable<CartResponse> {
    return this.http.get<CartResponse>(`${this.baseUrl}/user/get_item_cart/${storeId}`, {
      headers: this.getHeaders()
    });
  }

  getOrderNotes(storeId: string): Observable<OrderNotesResponse> {
    return this.http.get<OrderNotesResponse>(`${this.baseUrl}/user/get_order_notes/${storeId}`, {
      headers: this.getHeaders()
    });
  }
  addOrderNotes(data: { storeId: string; notes: string }): Observable<any> {
    return this.http.post(`${this.baseUrl}/user/add_order_notes`, data, {
      headers: this.getHeaders()
    });
  }

  reloadCartItems(): Observable<{ results: boolean; message: string; code: number }> {
    return this.http.get<{ results: boolean; message: string; code: number }>(
      `${this.baseUrl}/user/reload_cart_items`,
      { headers: this.getHeaders() }
    );
  }

  removeItemFromCart(data: { storeId: string; cartProductId: string }): Observable<any> {
    return this.http.delete(`${this.baseUrl}/user/remove_cart_product`, {
      body: data,
      headers: this.getHeaders()
    });
  }

  addNotesToItem(data: { storeId: string; item_id: string; notes: string }): Observable<any> {
    return this.http.post(`${this.baseUrl}/user/add_notes_to_item`, data, {
      headers: this.getHeaders()
    });
  }

  updateItemNotes(itemId: string, notes: string): Observable<any> {
    return this.http.post(`${this.baseUrl}/user/add_note_to_item`, {
      storeId: this.storeId,
      item_id: itemId,
      notes: notes
    }, {
      headers: this.getHeaders()
    }).pipe(
      tap(() => this.refreshCartData())
    );
  }

  removeCartItem(itemId: string): Observable<any> {
    return this.http.delete(`${this.baseUrl}/user/remove_cart_product`, {
      body: {
        storeId: this.storeId,
        item_id: itemId
      },
      headers: this.getHeaders()
    }).pipe(
      tap(() => this.refreshCartData()),
      tap(() => this.toast.success('Item removed from cart'))
    );
  }

  updateNotes(itemId: string, notes: string) {
    this.notesSubject.next({ itemId, notes });
  }

  private refreshCartData() {
    this.getCartItems().subscribe();
    this.getCartCount().subscribe();
  }

  private getHeaders(): HttpHeaders {
    return new HttpHeaders({
      'Content-Type': 'application/json',
      'Accept': '*/*',
      'access-control-allow-credentials': 'true',
      'authorization': `Bearer ${localStorage.getItem('token')}`,
      'storeid': this.storeId
    });
  }

  getCartItems(): Observable<any> {
    return this.http.get(`${this.baseUrl}/user/get_item_cart/${this.storeId}`, {
      headers: this.getHeaders()
    }).pipe(
      tap((response: any) => {
        this.cartItemsSubject.next(response.results);
      })
    );
  }

  getCartCount(): Observable<any> {
    return this.http.get(`${this.baseUrl}/user/get_cart_count/${this.storeId}`, {
      headers: this.getHeaders()
    }).pipe(
      tap((response: any) => {
        console.log(response.results,">>>>chekc the result ")
        this.cartCountSubject.next(response.results);
      })
    );
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/services/menu.service.ts">
import { Injectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class MenuService {
  private http = inject(HttpClient);
  private apiUrl = environment.API_URL;

  getBestProducts(menuSharingCode: string): Observable<any> {
    console.log('Getting best products for code:', menuSharingCode);
    return this.http.get(`${this.apiUrl}/menu/best_products/${menuSharingCode}`);
  }

  getItemFavoriteList(): Observable<any> {
    return this.http.get(`${this.apiUrl}/user/get_item_favourite_list`);
  }

  setItemFavorite(itemId: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/user/set_item_favourite`, { itemId });
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/services/theme.service.ts">
import { Injectable, inject, signal, computed } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment } from '../../environments/environment';
import { ApiResponse, ThemeData, StoreDetails } from '../interfaces/theme.interface';
import { Store } from '@ngrx/store';
import { selectDomainPages, selectPages, selectSocial, selectTiming, ThemeActions } from '../store/slices/theme.slice';
import { selectStoreName, selectLogo, selectThemeColors, selectStore, selectTheme } from '../store/slices/theme.slice';

@Injectable({
  providedIn: 'root'
})
export class ThemeService {
  private ngrxStore = inject(Store);
  private http = inject(HttpClient);
  
  private loading = signal(false);
  private error = signal<string | null>(null);
  
  private themeData = signal<ThemeData | null>(null);
  private storeData = signal<StoreDetails | null>(null);

  // Computed signals for derived state
  readonly isLoading = computed(() => this.loading());
  readonly currentError = computed(() => this.error());
  readonly theme = computed(() => this.themeData());
  readonly storeDetails = computed(() => this.storeData());

  // Store selectors
  getStoreName() {
    return this.ngrxStore.select(selectStoreName);
  }

  getLogo() {
    return this.ngrxStore.select(selectLogo);
  }

  getThemeColors() {
    return this.ngrxStore.select(selectThemeColors);
  }

  getStore() {
    return this.ngrxStore.select(selectStore);
  }

  getTheme() {
    return this.ngrxStore.select(selectTheme);
  }

  getSocial() {
    return this.ngrxStore.select(selectSocial);
  }

  getPages() {
    return this.ngrxStore.select(selectPages);
  }

  getTiming() {
    return this.ngrxStore.select(selectTiming);
  }

  getDomainPages() {
    return this.ngrxStore.select(selectDomainPages);
  }

  public initializeTheme() {
    this.loading.set(true);
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Accept': '*/*',
      'access-control-allow-credentials': 'true'
    });

    const payload = {
      domain: environment.DOMAIN
    };

    return this.http.post<ApiResponse>(
      `${environment.API_URL}/theme/active`,
      payload,
      { headers }
    ).subscribe({
      next: (response) => {
        if (response.code === 201) {
          this.ngrxStore.dispatch(ThemeActions.setThemeData({
            theme: response.results.theme,
            store: response.results.store,
            social: response.results.social,
            pages: response.results.pages,
            timing: response.results.timing,
            domainPages: response.results.domainPages
          }));
          
          const colors = response?.results?.theme?.colors?.current;
          if (colors?.primary) {
            document.documentElement.style.setProperty('--temp-back', colors.primary);
          }
          if (colors?.secondary) {
            document.documentElement.style.setProperty('--temp-sec-back', colors.secondary);
          }
  
          // Update the favicon
          if (response?.results?.theme?.Favicon) {
            const favicon: HTMLLinkElement | null = document.getElementById('favicon') as HTMLLinkElement;
            if (favicon) {
              favicon.href = response?.results?.theme?.Favicon;
            }
          }
  
          // Handle custom fonts dynamically
          if (response?.results?.theme?.font) {
            const resData = response?.results?.theme?.font;
            let currentFont = 'DM Sans';
            if (resData === 'Sans Serif') currentFont = 'Open Sans';
            if (resData === 'Inter') currentFont = 'Inter';
            if (resData === 'Modern') currentFont = 'Playfair Display';
            if (resData === 'Times Roman') currentFont = 'Frank Ruhl Libre';
            if (resData === 'Sans') currentFont = 'Inter';
  
            document.documentElement.style.setProperty('--current-font-back', currentFont);
          }
          console.log('Theme data stored:', response.results);
        }
        this.loading.set(false);
      },
      error: (err) => {
        console.error('Theme initialization error:', err);
        this.error.set(err.message);
        this.loading.set(false);
      }
    });
  }

  // Method to refresh theme data if needed
  refreshTheme() {
    this.initializeTheme();
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/services/toast.service.ts">
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';

export interface ToastData {
  message: string;
  duration?: number;
  type?: 'success' | 'error' | 'info';
  title?: string;
}

@Injectable({
  providedIn: 'root'
})
export class ToastService {
  private toastSubject = new Subject<ToastData>();
  toast$ = this.toastSubject.asObservable();

  success(message: string, title: string = 'Success', duration: number = 3000) {
    this.toastSubject.next({
      message,
      title,
      duration,
      type: 'success'
    });
  }

  error(message: string, title: string = 'Error', duration: number = 3000) {
    this.toastSubject.next({
      message,
      title,
      duration,
      type: 'error'
    });
  }

  info(message: string, title: string = 'Info', duration: number = 3000) {
    this.toastSubject.next({
      message,
      title,
      duration,
      type: 'info'
    });
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/services/validation.service.ts">
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { AddonGroup, Variation } from '../interfaces/food.interface';

@Injectable({
  providedIn: 'root'
})
export class ValidationService {
  private validationMessageSource = new BehaviorSubject<string>('');
  currentMessage = this.validationMessageSource.asObservable();

  constructor() { }

  updateMessage(message: string) {
    this.validationMessageSource.next(message);
  }

  clearMessage() {
    this.validationMessageSource.next('');
  }

  validateVariationSelection(selectedVariation: Variation | null): boolean {
    if (!selectedVariation) {
      this.updateMessage('Please select a variation');
      return false;
    }
    return true;
  }

  validateAddonSelections(
    addonGroups: AddonGroup[],
    selectedAddons: { [key: string]: any[] },
    variation?: Variation
  ): boolean {
    if (!addonGroups?.length) return true;

    for (const group of addonGroups) {
      const selectedCount = selectedAddons[group.addon_group_id]?.length || 0;
      let minLimit = 0;
      let maxLimit = 0;

      if (variation) {
        // Get limits from variation addon config
        const addonConfig = variation.addon;
        if (addonConfig) {
          minLimit = parseInt(addonConfig.addon_item_selection_min, 10);
          maxLimit = parseInt(addonConfig.addon_item_selection_max, 10);
        }
      }

      if (selectedCount < minLimit) {
        this.updateMessage(`Please select at least ${minLimit} option(s) from ${group.addon_group_name}`);
        return false;
      }

      if (maxLimit > 0 && selectedCount > maxLimit) {
        this.updateMessage(`You can select maximum ${maxLimit} option(s) from ${group.addon_group_name}`);
        return false;
      }
    }

    this.clearMessage();
    return true;
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/store/store.config.ts">
import { isDevMode } from '@angular/core';
import { provideStore, MetaReducer } from '@ngrx/store';
import { provideEffects } from '@ngrx/effects';
import { provideStoreDevtools } from '@ngrx/store-devtools';
import { counterFeature } from './slices/counter.slice';
import { authFeature } from './slices/auth.slice';
import { hydrationMetaReducer, storageMetaReducer } from './meta-reducers/storage.meta-reducer';
import { themeFeature } from './slices/theme.slice';
  
export const metaReducers: MetaReducer[] = [
  hydrationMetaReducer,
  storageMetaReducer
];

export const storeConfig = [
  provideStore(
    {
      counter: counterFeature.reducer,
      auth: authFeature.reducer,
      theme: themeFeature.reducer,
    },
    {
      metaReducers,
      runtimeChecks: {
        strictStateImmutability: true,
        strictActionImmutability: true
      }
    }
  ),
  provideEffects(),
  provideStoreDevtools({
    maxAge: 25,
    logOnly: !isDevMode(),
    trace: true
  })
];

</boltAction>

<boltAction type="file" filePath="src/app/components/Footer/footer.component.html">
<footer class="flex flex-col lg:px-14 sm:px-8 pt-2 sm:py-6 lg:pt-8 w-full bg-[var(--temp-sec-back)] text-white max-md:px-5 max-md:mt-10">
  <div class="w-full">
    <div class="flex max-sm:flex-col justify-between">
      <!-- Legal Section -->
      <div class="flex flex-col max-md:ml-0 w-full">
        <div class="flex flex-col text-white max-md:mt-10">
          <div class="flex justify-between max-sm:cursor-pointer" (click)="toggleLegalVisibility()">
            <h3 class="text-base font-medium uppercase">Legal</h3>
            <div class="max-sm:block hidden">
              @if (isLegalVisible) {
                <i class="fa-solid fa-angle-up h-4 w-4 text-white"></i>
              } @else {
                <i class="fa-solid fa-angle-down h-4 w-4 text-white"></i>
              }
            </div>
          </div>

          <nav [class.hidden]="!isLegalVisible && window.innerWidth < 640" class="flex flex-col mt-3 w-full text-sm gap-2 sm:block">
            <div class="flex flex-col gap-2 w-fit">
              @if (pages$ | async; as pages) {
                @if (pages?.policies?.trim()?.length) {
                  <a [routerLink]="'/policies'" class="hover:underline" (click)="scrollToTop()">
                    Privacy Policy
                  </a>
                }
                @if (pages?.condition?.trim()?.length) {
                  <a [routerLink]="'/term_and_condition'" class="hover:underline" (click)="scrollToTop()">
                    Terms and Conditions
                  </a>
                }
                @if (pages?.refund?.trim()?.length) {
                  <a [routerLink]="'/refund_policies'" class="hover:underline" (click)="scrollToTop()">
                    Refund Policy
                  </a>
                }
              }
            </div>
          </nav>
        </div>
      </div>

      <!-- Information Section -->
      <div class="flex flex-col ml-5 max-md:ml-0 w-full">
        <div class="flex flex-col text-white whitespace-nowrap max-md:mt-10">
          <div class="flex justify-between max-sm:cursor-pointer" (click)="toggleInformationVisibility()">
            <h3 class="text-base font-medium uppercase">Information</h3>
            <div class="max-sm:block hidden">
              @if (isInformationVisible) {
                <i class="fa-solid fa-angle-up h-4 w-4 text-white"></i>
              } @else {
                <i class="fa-solid fa-angle-down h-4 w-4 text-white"></i>
              }
            </div>
          </div>

          <nav [class.hidden]="!isInformationVisible && window.innerWidth < 640" class="flex flex-col mt-3 w-full text-sm gap-2 sm:block">
            <div class="flex flex-col gap-2 w-fit">
              @if (domainPages$ | async; as pages) {
                @for (page of pages; track page._id) {
                  <a [routerLink]="['/custom', page.title]" class="hover:underline" (click)="scrollToTop()">
                    {{ page.title.replace('_', ' ') }}
                  </a>
                }
              }
            </div>
          </nav>
        </div>
      </div>

      <!-- Contact Section -->
      <div class="flex flex-col ml-5 max-md:ml-0 w-full">
        <div class="flex flex-col text-white max-md:mt-10">
          <div class="flex justify-between max-sm:cursor-pointer" (click)="toggleContactVisibility()">
            <h3 class="text-base font-medium uppercase">Contact Us</h3>
            <div class="max-sm:block hidden">
              @if (isContactVisible) {
                <i class="fa-solid fa-angle-up h-4 w-4 text-white"></i>
              } @else {
                <i class="fa-solid fa-angle-down h-4 w-4 text-white"></i>
              }
            </div>
          </div>

          @if (store$ | async; as store) {
            <address [class.hidden]="!isContactVisible && window.innerWidth < 640" 
                    class="flex flex-col mt-3 w-full text-sm max-w-[315px] not-italic sm:block">
              <div class="flex flex-col gap-2">
                @if (store.store_email?.value) {
                  <div class="flex gap-3 items-center w-full whitespace-nowrap">
                    <app-email-icon class="text-white" />
                    <a [href]="'mailto:' + store.store_email.value" class="hover:underline">
                      {{ store.store_email.value }}
                    </a>
                  </div>
                }

                @if (store.store_mobile?.value) {
                  <div class="flex gap-4 items-start w-full">
                    <app-phone-icon class="text-white" />
                    <div class="flex flex-col gap-1">
                      @for (number of store.store_mobile.value.split(','); track $index) {
                        <a [href]="'tel:' + number.trim()" class="hover:underline">
                          {{ store.country?.countryPhoneCode }} {{ number.trim() }}
                        </a>
                      }
                    </div>
                  </div>
                }

                @if (store.address_line || store.town?.name || store.state?.name || store.country?.name) {
                  <div class="flex gap-4 items-start w-full">
                    <app-location-icon class="text-white" />
                    <span>
                      {{ store.address_line }}, 
                      {{ store.town?.name }}, 
                      {{ store.state?.name }}, 
                      {{ store.country?.name }}
                    </span>
                  </div>
                }

                @if (timing$ | async; as timing) {
                  <div class="flex gap-4 items-start w-full">
                    <app-clock-icon class="text-white" />
                    <div class="flex flex-col w-36">
                      @for (time of timing[todaysDay]; track $index) {
                        <span>{{ time.from }} - {{ time.to }}</span>
                      }
                    </div>
                  </div>
                }
              </div>
            </address>
          }
        </div>
      </div>

      <!-- Social Media Section (Desktop) -->
      <div class="hidden lg:flex flex-col lg:flex-1 ml-5 max-md:ml-0 w-full">
        @if (social$ | async; as social) {
          <div class="max-md:mt-10 min-w-[190px]">
            <h3 class="text-base font-medium text-white uppercase">Social Media</h3>
            <div class="flex gap-2 items-center mt-3 mb-2">
              @if (social.Social?.facebook) {
                <app-facebook-icon 
                  class="text-white hover:text-blue-500 transition-all duration-200 cursor-pointer"
                  (click)="handleRedirect(social.Social.facebook)"
                />
              }
              @if (social.Social?.x) {
                <app-twitter-x-icon 
                  class="text-white hover:text-black transition-all duration-200 cursor-pointer"
                  (click)="handleRedirect(social.Social.x)"
                />
              }
              @if (social.Social?.instagram) {
                <app-instagram-icon 
                  class="text-white hover:text-pink-700 transition-all duration-200 cursor-pointer"
                  (click)="handleRedirect(social.Social.instagram)"
                />
              }
              @if (social.Social?.linkedin) {
                <app-linkedin-icon 
                  class="text-white hover:text-blue-400 transition-all duration-200 cursor-pointer"
                  (click)="handleRedirect(social.Social.linkedin)"
                />
              }
              @if (social.Social?.Youtube) {
                <app-youtube-icon 
                  class="text-white hover:text-red-700 transition-all duration-200 cursor-pointer"
                  (click)="handleRedirect(social.Social.Youtube)"
                />
              }
              @if (social.Social?.Pinterest) {
                <app-pinterest-icon 
                  class="text-white hover:text-[#e60023] transition-all duration-200 cursor-pointer"
                  (click)="handleRedirect(social.Social.Pinterest)"
                />
              }
            </div>

            <!-- App Store Links -->
            <div class="gap-2 flex flex-col">
              @if (social.app?.ios) {
                <div class="w-[180px] h-[50px]">
                  <a [href]="social.app.ios" target="_blank" rel="noreferrer">
                    <img loading="lazy"
                         src="https://cdn.builder.io/api/v1/image/assets/TEMP/151516b1e6babec0399abe50d1d3a37c8a9cebc94959389037aac8e3ac2cdac3"
                         class="w-full h-full"
                         alt="App Store" />
                  </a>
                </div>
              }
              @if (social.app?.android) {
                <div class="w-[180px] h-[50px]">
                  <a [href]="social.app.android" target="_blank" rel="noreferrer">
                    <img loading="lazy"
                         src="https://cdn.builder.io/api/v1/image/assets/TEMP/088a4a254d91b3e63b8d554047e6c9a7586fb77c908dd34e2fa3bbf55db8596a"
                         class="w-full h-full"
                         alt="Google Play" />
                  </a>
                </div>
              }
            </div>
          </div>
        }
      </div>

      <!-- Social Media Section (Mobile) -->
      <div class="block lg:hidden flex-col lg:flex-1 w-full py-9">
        @if (social$ | async; as social) {
          <h3 class="text-base font-medium text-white uppercase">Social Media</h3>
          <div class="flex justify-between flex-wrap items-center gap-2">
            <div class="flex flex-col w-full">
              <div class="flex gap-2 items-center mt-3">
                @if (social.Social?.facebook) {
                  <app-facebook-icon 
                    class="text-white hover:text-blue-500 transition-all duration-200 cursor-pointer"
                    (click)="handleRedirect(social.Social.facebook)"
                  />
                }
                @if (social.Social?.x) {
                  <app-twitter-x-icon 
                    class="text-white hover:text-black transition-all duration-200 cursor-pointer"
                    (click)="handleRedirect(social.Social.x)"
                  />
                }
                @if (social.Social?.instagram) {
                  <app-instagram-icon 
                    class="text-white hover:text-pink-700 transition-all duration-200 cursor-pointer"
                    (click)="handleRedirect(social.Social.instagram)"
                  />
                }
                @if (social.Social?.linkedin) {
                  <app-linkedin-icon 
                    class="text-white hover:text-blue-400 transition-all duration-200 cursor-pointer"
                    (click)="handleRedirect(social.Social.linkedin)"
                  />
                }
                @if (social.Social?.Youtube) {
                  <app-youtube-icon 
                    class="text-white hover:text-red-700 transition-all duration-200 cursor-pointer"
                    (click)="handleRedirect(social.Social.Youtube)"
                  />
                }
                @if (social.Social?.Pinterest) {
                  <app-pinterest-icon 
                    class="text-white hover:text-[#e60023] transition-all duration-200 cursor-pointer"
                    (click)="handleRedirect(social.Social.Pinterest)"
                  />
                }
              </div>
            </div>
            <!-- Mobile app store links -->
            @if (social.app?.ios) {
              <a [href]="social.app.ios" target="_blank" rel="noreferrer">
                <img loading="lazy"
                     src="https://cdn.builder.io/api/v1/image/assets/TEMP/151516b1e6babec0399abe50d1d3a37c8a9cebc94959389037aac8e3ac2cdac3"
                     class="w-[140px] sm:w-[150px] sm:h-[45px] rounded-xl"
                     alt="App Store" />
              </a>
            }
            @if (social.app?.android) {
              <a [href]="social.app.android" target="_blank" rel="noreferrer">
                <img loading="lazy"
                     src="https://cdn.builder.io/api/v1/image/assets/TEMP/088a4a254d91b3e63b8d554047e6c9a7586fb77c908dd34e2fa3bbf55db8596a"
                     class="w-[140px] sm:w-[150px] sm:h-[45px] rounded-xl"
                     alt="Google Play" />
              </a>
            }
          </div>
        }
      </div>
    </div>
  </div>

  <!-- Footer Bottom -->
  <div class="flex flex-wrap py-1 gap-5 items-center justify-center self-start text-center">
    <div class="w-[90px] h-[72px]">
      <app-logo [isHeader]="false"></app-logo>
    </div>
    <div class="self-stretch my-auto lg:text-[14px] sm:text-[12px] text-white">
      Copyright © 2010-2024 All rights reserved.
    </div>
  </div>
</footer> 
</boltAction>

<boltAction type="file" filePath="src/app/components/Footer/footer.component.ts">
import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { Store } from '@ngrx/store';
import { ThemeService } from '../../services/theme.service';
import { LogoComponent } from '../logo/logo.component';
import { Timing } from '../../interfaces/theme.interface';
import { FacebookIconComponent, TwitterXIconComponent, InstagramIconComponent, LinkedinIconComponent, YoutubeIconComponent, PinterestIconComponent } from '../../icons/social-icons.component';
import { EmailIconComponent, PhoneIconComponent, LocationIconComponent, ClockIconComponent } from '../../icons/contact-icons.component';

@Component({
  selector: 'app-footer',
  standalone: true,
  imports: [
    CommonModule, 
    RouterModule, 
    LogoComponent,
    FacebookIconComponent,
    TwitterXIconComponent,
    InstagramIconComponent,
    LinkedinIconComponent,
    YoutubeIconComponent,
    PinterestIconComponent,
    EmailIconComponent,
    PhoneIconComponent,
    LocationIconComponent,
    ClockIconComponent
  ],
  templateUrl: './footer.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class FooterComponent {
  private themeService = inject(ThemeService);
  
  readonly store$ = this.themeService.getStore();
  readonly social$ = this.themeService.getSocial();
  readonly pages$ = this.themeService.getPages();
  readonly timing$ = this.themeService.getTiming();
  readonly domainPages$ = this.themeService.getDomainPages();

  isLegalVisible = false;
  isInformationVisible = false;
  isContactVisible = false;
  window = window; // Make window available to template

  toggleLegalVisibility() {
    this.isLegalVisible = !this.isLegalVisible;
  }

  toggleInformationVisibility() {
    this.isInformationVisible = !this.isInformationVisible;
  }

  toggleContactVisibility() {
    this.isContactVisible = !this.isContactVisible;
  }

  scrollToTop() {
    window.scrollTo(0, 0);
  }

  handleRedirect(url: string) {
    if (!url) {
      console.error('No URL provided for redirection.');
      return;
    }
    window.open(url, '_blank');
  }

  get todaysDay(): keyof Timing {
    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'] as const;
    return days[new Date().getDay()];
  }
}
</boltAction>

<boltAction type="file" filePath="src/app/components/authentication/authentication.component.ts">
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Dialog, DialogModule } from '@angular/cdk/dialog';
import { IoMdAddComponent } from '../../icons/io-md-add.component';
import { LoginPageComponent } from './login/login.component';
import { OtpDialogComponent } from './otp-validation/otp-dialog.component';
import { ComponentType } from '@angular/cdk/overlay';

@Component({
  selector: 'app-authentication',
  standalone: true,
  imports: [CommonModule, DialogModule, IoMdAddComponent],
  template: `
    @if (isHeader) {
      <button
        (click)="openDialog($event)"
        class="h-10 hover:text-white hover:bg-[var(--temp-back)] border-[var(--temp-back)] text-[var(--temp-back)] w-16 font-[600] border-2 rounded-lg"
      >
        Login
      </button>
    } @else {
      <i-io-md-add
        class="text-[var(--temp-back)] hover:text-white bg-white hover:bg-[var(--temp-back)] border border-[var(--temp-back)] p-1 rounded-full cursor-pointer"
        [size]="25"
        (click)="openDialog($event)"
      />
    }
  `
})
export class AuthenticationComponent {
  @Input() isHeader: boolean = false;
  currentPage = 0;

  constructor(private dialog: Dialog) {}

  openDialog(event: Event) {
    this.currentPage = 0;
    const dialogRef = this.dialog.open(LoginPageComponent, {
      width: '425px',
      data: { changePage: (page: number) => this.changePage(page) }
    });

    dialogRef.closed.subscribe(() => {
      this.currentPage = 0;
    });

    // prevent he bubbling the click event. 
    event.stopPropagation();
  }

  private changePage(page: number) {
    this.currentPage = page;
    this.dialog.closeAll();

    let component;
    switch (page) {
      case 1:
        component = OtpDialogComponent;
        break;
      default:
        component = LoginPageComponent;
    }

    if (component) {
      this.dialog.open(component as ComponentType<any>, {
        width: '425px',
        data: { changePage: (p: number) => this.changePage(p) }
      });
    }
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/header/header.component.html">
<div class="relative bg-white">
  <nav class="flex overflow-hidden max-h-[60px] py-2 items-center px-4 justify-between shadow-sm">
    <!-- Logo Section -->
    <div class="flex gap-8 items-center">
      <div class="py-2 w-[150px] h-[72px]">
        <app-logo [isHeader]="true"></app-logo>
      </div>
      <div>
      </div>
    </div>

    <!-- Right Side Navigation -->
    <div class="flex items-center gap-2 md:gap-5 h-9 cursor-pointer">
      <!-- Cart Button -->
      <div class="relative">
        <button 
          (click)="cartPopupService.toggle()"
          class="cart-trigger whitespace-nowrap text-sm font-medium transition-colors focus-visible:outline-none 
                 focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none 
                 disabled:opacity-50 text-primary-foreground shadow h-10 rounded-md bg-white 
                 hover:bg-[var(--temp-back)] border-2 border-[var(--temp-back)] px-4 
                 flex items-center justify-center lg:static max-lg:fixed max-lg:bottom-10 
                 max-lg:right-4 max-lg:z-50"
          (mouseenter)="setHover(true)"
          (mouseleave)="setHover(false)">
          <div class="relative">
            <app-cart-svg [isHovered]="isHover()"></app-cart-svg>
            @if (cartService.cartCount$ | async; as count) {
              @if (count > 0) {
                <div class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full min-w-[18px] h-[18px] flex items-center justify-center text-xs font-medium">
                  {{ count }}
                </div>
              }
            }
          </div>
        </button>
      </div>

      <!-- Authentication -->
      @if (!isUser()) {
        <app-authentication [isHeader]="true"></app-authentication>
      } @else {
        <div class="flex items-center gap-2">
          <div class="relative" (click)="toggleUserDropdown()">
            <img 
              src="assets/header/photo.png" 
              alt="User Profile" 
              class="cursor-pointer"
            >
          </div>
          @if (showUserDropdown()) {
            <div class="absolute top-full right-0 mt-2 bg-white rounded-lg shadow-[0_2px_10px_rgba(0,0,0,0.1)] z-50">
              <app-user-dropdown></app-user-dropdown>
            </div>
          }
          <app-hammer-links></app-hammer-links>
        </div>
      }
    </div>
  </nav>
</div>

<!-- Cart Popup -->
@if (cartPopupService.isOpen()) {
  <app-cart-popup class="cart-popup-content"></app-cart-popup>
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/header/header.component.ts">
import { Component, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LogoComponent } from '../logo/logo.component';
import { CartSvgComponent } from '../../icons/cart-svg/cart-svg.component';
import { AuthenticationComponent } from '../authentication/authentication.component';
import { UserDropdownComponent } from './user-dropdown/user-dropdown.component';
import { HammerLinksComponent } from './hammer-links/hammer-links.component';
import { CartPopupComponent } from './cart-popup/cart-popup.component';
import { EmptyCartComponent } from './empty-cart/empty-cart.component';
import { Store } from '@ngrx/store';
import { CounterActions } from '../../store/slices/counter.slice';
import { Dialog } from '@angular/cdk/dialog';
import { ThemeService } from '../../services/theme.service';
import { selectLogo, selectStoreName, selectThemeColors } from '../../store/slices/theme.slice';
import { CartPopupService } from '../../services/cart-popup.service';
import { CartService } from '../../services/cart.service';
import { MenuPopupComponent } from '../food/menu-popup/menu-popup.component';
@Component({
  selector: 'app-header',
  standalone: true,
  imports: [
    CommonModule,
    LogoComponent,
    CartSvgComponent,
    AuthenticationComponent,
    UserDropdownComponent,
    HammerLinksComponent,
    CartPopupComponent,
    EmptyCartComponent,
    MenuPopupComponent
  ],
  templateUrl: './header.component.html'
})
export class HeaderComponent {
  private ngrxStore = inject(Store);
  private themeService = inject(ThemeService);
  cartPopupService = inject(CartPopupService);
  cartService = inject(CartService);

  readonly social$ = this.themeService.getSocial();
  readonly storeName$ = this.ngrxStore.select(selectStoreName);
  readonly themeColors$ = this.ngrxStore.select(selectThemeColors);

  isHover = signal(false);
  showCartPopUp = signal(false);
  showEmptyCart = signal(false);
  showUserDropdown = signal(false);
  cartItems = signal<any[]>([]);
  dialog = inject(Dialog);
  userImagePath = `https://i.ibb.co/6cyLcnxM/user.png`;
  cartCount = signal(0);
  
  setHover(value: boolean) {
    this.isHover.set(value);
  }
  constructor(){
  this.showUserDropdown.update(value => {
     return false;
  })
  // here update cartPopupService as close. 
  this.cartPopupService.close();
  // this.cartService.cartCount$.subscribe(count => {
  //   console.log({count});
  // })
  this.cartService.getCartCount().subscribe(count => {
    console.log({count});
  })
  
}


  toggleUserDropdown() {
    console.log('Toggling dropdown');
    this.showUserDropdown.update(value => {
      if(value === false){
        document.body.style.overflow = 'hidden';
      }else{
        document.body.style.overflow = 'auto';
      }
      return!value
    }
  );
    
    // If opening the dropdown, add a click listener to close it when clicking outside
    if (this.showUserDropdown()) {
      setTimeout(() => {
        document.addEventListener('click', this.closeDropdown);
      });
    }
  }

  closeDropdown = (event: MouseEvent) => {
    const dropdown = document.querySelector('.user-dropdown');
    const userImage = document.querySelector('.user-image');
    
    if (dropdown && !dropdown.contains(event.target as Node) && 
        userImage && !userImage.contains(event.target as Node)) {
      this.showUserDropdown.set(false);
      document.removeEventListener('click', this.closeDropdown);
    }
  }

  toggleCartPopUp() {
    this.showCartPopUp.update(value => !value);
  }

  toggleEmptyCart() {
    this.showEmptyCart.update(value => !value);
  }

  isUser(): boolean {

    return localStorage.getItem('token') !== null;
  }

  increaseCartCount() {
    this.ngrxStore.dispatch(CounterActions.increment({ amount: 1 }));
  }

  ngOnDestroy() {
    document.removeEventListener('click', this.closeDropdown);
    document.body.style.overflow = 'auto';
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/logo/logo.component.ts">
import { Component, Input, inject } from '@angular/core';
import { RouterLink } from '@angular/router';
import { AsyncPipe } from '@angular/common';
import { ThemeService } from '../../services/theme.service';
import { map } from 'rxjs/operators';
import { ThemeData } from '../../interfaces/theme.interface';

@Component({
  selector: 'app-logo',
  standalone: true,
  imports: [RouterLink, AsyncPipe],
  template: `
    @if (logo$ | async; as logo) {
      <a [routerLink]="['/']" class="cursor-pointer">
        <img 
          [src]="logo"
          [alt]="isHeader ? 'DineHub Logo' : 'DineHub White Logo'"
          class="h-full w-full object-contain"
        >
      </a>
    }
  `
})
export class LogoComponent {
  @Input() isHeader: boolean = false;
  private themeService = inject(ThemeService);
  
  readonly social$ = this.themeService.getTheme();
  readonly logo$ = this.social$.pipe(
    map((theme: ThemeData | null) => theme?.Logo || '')
  );
} 
</boltAction>

<boltAction type="file" filePath="src/app/icons/cart-svg/cart-svg.component.ts">
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-cart-svg',
  standalone: true,
  template: `
    <svg
      width="28"
      height="28"
      viewBox="0 0 30 30"
      [attr.fill]="isHovered ? 'white' : 'var(--temp-back)'"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g id="solar:cart-3-outline">
        <g id="Group">
          <path
            id="Vector 1"
            d="M6.375 11.25L3.75 13.125L5.625 24L7.5 26.25L23.625 25.5L26.25 14.25L24 11.625L6.375 11.25Z"
            [attr.fill]="isHovered ? 'white' : 'var(--temp-back)'"
            fill-opacity="0.15"
          />
          <path
            id="Vector"
            d="M10.9375 16.25C10.9375 16.0014 10.8387 15.7629 10.6629 15.5871C10.4871 15.4113 10.2486 15.3125 10 15.3125C9.75136 15.3125 9.5129 15.4113 9.33709 15.5871C9.16127 15.7629 9.0625 16.0014 9.0625 16.25V21.25C9.0625 21.4986 9.16127 21.7371 9.33709 21.9129C9.5129 22.0887 9.75136 22.1875 10 22.1875C10.2486 22.1875 10.4871 22.0887 10.6629 21.9129C10.8387 21.7371 10.9375 21.4986 10.9375 21.25V16.25ZM20 15.3125C20.2486 15.3125 20.4871 15.4113 20.6629 15.5871C20.8387 15.7629 20.9375 16.0014 20.9375 16.25V21.25C20.9375 21.4986 20.8387 21.7371 20.6629 21.9129C20.4871 22.0887 20.2486 22.1875 20 22.1875C19.7514 22.1875 19.5129 22.0887 19.3371 21.9129C19.1613 21.7371 19.0625 21.4986 19.0625 21.25V16.25C19.0625 16.0014 19.1613 15.7629 19.3371 15.5871C19.5129 15.4113 19.7514 15.3125 20 15.3125ZM15.9375 16.25C15.9375 16.0014 15.8387 15.7629 15.6629 15.5871C15.4871 15.4113 15.2486 15.3125 15 15.3125C14.7514 15.3125 14.5129 15.4113 14.3371 15.5871C14.1613 15.7629 14.0625 16.0014 14.0625 16.25V21.25C14.0625 21.4986 14.1613 21.7371 14.3371 21.9129C14.5129 22.0887 14.7514 22.1875 15 22.1875C15.2486 22.1875 15.4871 22.0887 15.6629 21.9129C15.8387 21.7371 15.9375 21.4986 15.9375 21.25V16.25Z"
            [attr.fill]="isHovered ? 'white' : 'var(--temp-back)'"
          />
          <path
            id="Vector_2"
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M21.592 4.34125C20.997 4.10875 20.3308 4.07 19.477 4.06375C19.2997 3.68934 19.0198 3.37298 18.6697 3.15147C18.3196 2.92996 17.9138 2.81241 17.4995 2.8125H12.4995C12.0854 2.8123 11.6797 2.92966 11.3297 3.15094C10.9796 3.37222 10.6995 3.68832 10.522 4.0625C9.66704 4.07 9.00204 4.10875 8.40704 4.34125C7.69676 4.61909 7.07903 5.09127 6.62454 5.70375C6.16579 6.32 5.94954 7.1125 5.65454 8.20125L4.86954 11.08C4.37733 11.3274 3.94614 11.6809 3.60704 12.115C2.82954 13.1113 2.69204 14.2975 2.83079 15.6575C2.96454 16.9775 3.38079 18.64 3.90079 20.72L3.93329 20.8538C4.26329 22.1688 4.52954 23.2375 4.84704 24.0713C5.17829 24.9412 5.59954 25.6537 6.29204 26.195C6.98579 26.7362 7.77954 26.97 8.70329 27.0825C9.58829 27.1875 10.6908 27.1875 12.047 27.1875H17.952C19.3083 27.1875 20.4095 27.1875 21.2958 27.0813C22.2208 26.9713 23.0133 26.7362 23.7058 26.1938C24.3995 25.6537 24.8195 24.9412 25.1508 24.0713C25.4695 23.2375 25.7358 22.1687 26.0645 20.8525L26.0983 20.7212C26.6183 18.64 27.0333 16.9775 27.1683 15.6588C27.3058 14.2963 27.1683 13.1113 26.3908 12.115C26.0521 11.681 25.6213 11.3275 25.1295 11.08L24.3445 8.20125C24.0483 7.1125 23.832 6.32 23.3745 5.7025C22.9199 5.09048 22.3022 4.61875 21.592 4.34125ZM9.08954 6.0875C9.36454 5.98 9.69704 5.94875 10.5233 5.94C10.8758 6.6775 11.6283 7.1875 12.4983 7.1875H17.4983C18.3708 7.1875 19.1233 6.6775 19.4758 5.94C20.302 5.94875 20.6345 5.98 20.9095 6.0875C21.292 6.2375 21.6245 6.49125 21.8695 6.82125C22.0895 7.1175 22.2183 7.53125 22.582 8.865L23.0245 10.4862C21.727 10.3125 20.052 10.3125 17.9708 10.3125H12.027C9.94704 10.3125 8.27204 10.3125 6.97454 10.4862L7.41704 8.865C7.77954 7.53125 7.90954 7.1175 8.12954 6.82125C8.37431 6.49139 8.707 6.2371 9.08954 6.0875ZM12.4995 4.6875C12.4167 4.6875 12.3372 4.72042 12.2786 4.77903C12.22 4.83763 12.187 4.91712 12.187 5C12.187 5.08288 12.22 5.16237 12.2786 5.22097C12.3372 5.27958 12.4167 5.3125 12.4995 5.3125H17.4995C17.5824 5.3125 17.6619 5.27958 17.7205 5.22097C17.7791 5.16237 17.812 5.08288 17.812 5C17.812 4.91712 17.7791 4.83763 17.7205 4.77903C17.6619 4.72042 17.5824 4.6875 17.4995 4.6875H12.4995ZM5.08579 13.2687C5.43454 12.8225 5.98579 12.5225 7.12329 12.3575C8.28704 12.19 9.86454 12.1875 12.1058 12.1875H17.8933C20.1345 12.1875 21.7108 12.19 22.8745 12.3575C24.0133 12.5225 24.5645 12.8225 24.9133 13.27C25.262 13.7163 25.4195 14.3225 25.302 15.4675C25.1833 16.6375 24.8033 18.1675 24.2595 20.3425C23.9133 21.7275 23.672 22.6875 23.3995 23.405C23.1345 24.0975 22.8758 24.4638 22.552 24.7175C22.2283 24.97 21.8095 25.1313 21.0733 25.22C20.3108 25.3113 19.3233 25.3125 17.8933 25.3125H12.1058C10.6758 25.3125 9.68704 25.3113 8.92579 25.22C8.18829 25.1325 7.77079 24.97 7.44704 24.7175C7.12204 24.4638 6.86329 24.0975 6.59954 23.405C6.32704 22.6875 6.08579 21.7275 5.73829 20.3425C5.19579 18.1675 4.81454 16.6375 4.69579 15.4675C4.57954 14.3225 4.73704 13.715 5.08579 13.2687Z"
            [attr.fill]="isHovered ? 'white' : 'var(--temp-back)'"
          />
        </g>
      </g>
    </svg>
  `
})
export class CartSvgComponent {
  @Input() isHovered: boolean = false;
} 
</boltAction>

<boltAction type="file" filePath="src/app/pages/bestseller/bestseller.component.html">
<div class="w-full">
  <div class="container mx-auto px-4">
    <div class="flex justify-between items-center">
      <h2 class="text-2xl font-semibold">Best Seller</h2>
      <span 
        class="flex items-center cursor-pointer gap-1 hover:text-[var(--temp-back)]"
        (click)="navigateToMenu()">
        View More 
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
        </svg>
      </span>
    </div>

    @if (isLoading) {
      <div class="text-center py-8 text-gray-500">Loading...</div>
    } @else {
      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-[16px] my-8 h-fit">
        @for (item of bestProducts; track item.item_id) {
          <div class="overflow-hidden">
            <app-food-card
              [item]="item"
              [itemFavorite]="false">
            </app-food-card>
          </div>
        }
      </div>
    }
  </div>
</div> 
</boltAction>

<boltAction type="file" filePath="src/app/pages/bestseller/bestseller.component.ts">
import { Component, OnInit, OnDestroy, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Store } from '@ngrx/store';
import { MenuService } from '../../services/menu.service';
import { CartService } from '../../services/cart.service';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';
import { FoodCardComponent } from '../../components/food/food-card/food-card.component';
import { Subscription } from 'rxjs';
import { ThemeService } from '../../services/theme.service';
import { FoodItem } from '../../interfaces/food.interface';

@Component({
  selector: 'app-bestseller',
  standalone: true,
  imports: [CommonModule, FoodCardComponent],
  templateUrl: './bestseller.component.html',
  styleUrls: ['./bestseller.component.scss']
})
export class BestsellerComponent implements OnInit, OnDestroy {
  private menuService = inject(MenuService);
  private cartService = inject(CartService);
  private authService = inject(AuthService);
  private store = inject(Store);
  private themeService = inject(ThemeService);
  private subscriptions = new Subscription();

  bestProducts: FoodItem[] = [];
  isLoading = true;
  favoriteItems: string[] = [];
  cartItems: any[] = [];

  constructor(private router: Router) {}

  ngOnInit() {
    console.log('BestsellerComponent initialized');
    this.loadBestProducts();
    this.setupSubscriptions();
    this.cartService.getCartItems().subscribe();
  }

  ngOnDestroy() {
    this.subscriptions.unsubscribe();
  }

  private loadBestProducts() {
    this.isLoading = true;
    console.log('Loading best products...');
    
    this.subscriptions.add(
      this.themeService.getStore().subscribe({
        next: (store) => {
          if (!store?.menusharingcode) {
            this.isLoading = false;
            return;
          }
          
          this.subscriptions.add(
            this.menuService.getBestProducts(store.menusharingcode).subscribe({
              next: (response: any) => {
                console.log('Best products response:', response);
                this.bestProducts = response.results;
                this.isLoading = false;
              },
              error: (error) => {
                console.error('Error loading best products:', error);
                this.isLoading = false;
              }
            })
          );
        }
      })
    );
  }

  private setupSubscriptions() {
    // Subscribe to cart items
    this.subscriptions.add(
      this.cartService.cartItems$.subscribe(items => {
        this.cartItems = items;
      })
    );

    // Subscribe to auth state and load favorites if authenticated
    this.subscriptions.add(
      this.authService.isAuthenticated$.subscribe(isAuthenticated => {
        if (isAuthenticated) {
          this.loadFavoriteItems();
        }
      })
    );
  }

  private loadFavoriteItems() {
    this.subscriptions.add(
      this.menuService.getItemFavoriteList().subscribe({
        next: (response: any) => {
          if (response?.results?.item_id) {
            this.favoriteItems = response.results.item_id;
          }
        },
        error: (error) => {
          console.error('Error loading favorite items:', error);
        }
      })
    );
  }

  isItemInCart(item: any) {
    return this.cartItems.find(cartItem => cartItem.item_id === item.item_id);
  }

  navigateToMenu() {
    this.router.navigate(['/menu']);
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/pages/checkout/checkout.component.html">

</boltAction>

<boltAction type="file" filePath="src/app/pages/checkout/checkout.component.ts">
import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CartService } from '../../services/cart.service';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

interface CartItem {
  _id: string;
  item_id: string;
  item_name: string;
  item_image_url: string;
  item_description?: string;
  quantity: number;
  price: number;
  total: number;
  notes?: string;
  addons_details: Array<{
    addon_group_items: {
      addonitem_name: string;
      price: number;
    }
  }>;
  variation?: string;
  items_details: {
    item_name: string;
    variation?: {
      name: string;
    }
  };
}

// <textarea
// [(ngModel)]="orderNotes"
// (change)="updateOrderNotes()"
// class="bg-[#E6F3F8] rounded-lg w-full pt-2 px-4 outline-none text-sm resize-none"
// rows="3"
// placeholder="Add special Notes">
// </textarea>

@Component({
  selector: 'app-cart-summary',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="rounded-lg">
      <div class="lg:bg-white rounded-lg pt-4">
        <!-- Header -->
        <div class="border-2 bg-white lg:border-none mx-4 px-4 py-6 rounded-xl">
          <div class="flex flex-col gap-2 lg:border-b-2">
            <div class="flex justify-between items-center">
              <p class="text-base font-semibold">Order Summary</p>
              <button class="bg-[#E9F3F6] text-xs py-1 px-5 rounded-md">
                {{ orderType }}
              </button>
            </div>
            <div class="flex justify-between items-center mb-2">
              <p class="text-sm">{{ (cartItems$ | async)?.length || 0 }} Items</p>
              <p class="text-[#748BA0] text-xs" *ngIf="isDelivery">
                Estimated delivery: {{ deliveryTime }} mins
              </p>
            </div>
          </div>

          <!-- Cart Items -->
          <div class="max-h-[56vh] overflow-y-auto">
            <div *ngFor="let item of cartItems$ | async" class="lg:mx-4 lg:border-2 lg:rounded-lg my-3 py-1 relative">
              <div class="lg:px-4">
                <!-- Item Header -->
                <div class="flex justify-between items-center">
                  <div class="flex items-center gap-2">
                    <p class="text-sm">{{ item.items_details.item_name }}
                      <span *ngIf="item.variation" class="text-sm">
                        ({{ item.items_details.variation?.name }})
                      </span>
                    </p>
                  </div>
                  <div class="flex text-sm">
                    {{ getCurrencySymbol() }} {{ formatPrice(item.total * item.quantity) }}
                  </div>
                </div>

                <!-- Addons -->
                <div *ngIf="item.addons_details.length > 0" class="flex mt-1 lg:ml-[10%]">
                  <p class="text-[#748BA0] text-xs">
                    (Add-on: {{ getAddonNames(item.addons_details) }})
                  </p>
                </div>

                <!-- Quantity Controls -->
                <div class="flex justify-between items-center mt-2">
                  <div class="flex items-center space-x-4">
                    <button (click)="updateQuantity(item, -1)" 
                            class="p-1 rounded-full bg-gray-100">-</button>
                    <span class="font-semibold text-[#748BA0]">{{ item.quantity }}</span>
                    <button (click)="updateQuantity(item, 1)"
                            class="p-1 rounded-full bg-gray-100">+</button>
                  </div>
                  <button (click)="removeItem(item)" 
                          class="text-red-500 text-sm">Remove</button>
                </div>

                <!-- Notes -->
                <input *ngIf="item.notes !== undefined"
                       type="text"
                       [value]="item.notes"
                       (change)="updateNotes(item, $event)"
                       placeholder="Add Note"
                       class="text-[#748BA0] py-1.5 my-2 rounded-lg text-sm px-2 w-full border outline-none">
              </div>
            </div>
          </div>

          <!-- Order Notes -->
          <div class="lg:mx-4 mt-2">
           
          </div>

          <!-- Actions -->
          <div class="mx-4">
            <button (click)="addMoreItems()"
                    class="w-full flex justify-center items-center bg-white hover:bg-[#primary] border-2 border-[#primary] my-4 text-[#primary] hover:text-white font-bold text-sm py-2 rounded-lg">
              + Add More Items
            </button>
            <button (click)="confirmOrder()"
                    [disabled]="isProcessing || !(cartItems$ | async)?.length"
                    class="w-full flex justify-center items-center bg-[#primary] text-white font-bold text-sm py-2 rounded-lg">
              {{ isProcessing ? 'Processing...' : 'Confirm Order' }}
            </button>
          </div>
        </div>
      </div>
    </div>
  `
})
export class CartSummaryComponent implements OnInit {
  @Input() orderType: 'DELIVERY' | 'PICKUP' = 'DELIVERY';
  @Input() deliveryTime: number = 30;
  @Output() orderConfirmed = new EventEmitter<void>();

  cartItems$: Observable<CartItem[]>;
  isProcessing = false;
  orderNotes: string = '';
  isDelivery: boolean = true;

  constructor(
    private cartService: CartService,
    private router: Router
  ) {
    this.cartItems$ = this.cartService.cartItems$;
    this.isDelivery = this.orderType === 'DELIVERY';
  }

  ngOnInit(): void {
    this.cartService.getCartItems().subscribe();

    // Initialize component
  }

  updateQuantity(item: CartItem, change: number): void {
    const newQuantity = item.quantity + change;
    if (newQuantity < 0) return;
    
    if (newQuantity === 0) {
      this.removeItem(item);
    } else {
      this.cartService.updateQuantity(item._id, newQuantity).subscribe();
    }
  }

  removeItem(item: CartItem): void {
    // this.cartService.removeItemFromCart({storeId: this.storeId, cartProductId: item._id}).subscribe();
  }

  updateNotes(item: CartItem, event: Event): void {
    const notes = (event.target as HTMLInputElement).value;
    this.cartService.updateItemNotes(item._id, notes).subscribe();
  }

  updateOrderNotes(): void {
    // this.cartService.updateOrderNotes(this.orderNotes).subscribe();
  }

  getAddonNames(addons: any[]): string {
    return addons
      .map(addon => addon.addon_group_items?.addonitem_name)
      .filter(Boolean)
      .join(', ');
  }

  formatPrice(price: number): string {
    return price.toFixed(2);
  }

  getCurrencySymbol(): string {
    return '₹'; // Or get from a config service
  }

  addMoreItems(): void {
    this.router.navigate(['/menu']);
  }

  confirmOrder(): void {
    this.isProcessing = true;
    // Implement order confirmation logic
    this.orderConfirmed.emit();
    this.isProcessing = false;
  }
}
</boltAction>

<boltAction type="file" filePath="src/app/store/meta-reducers/storage.meta-reducer.ts">
import { ActionReducer, Action } from '@ngrx/store';

export function storageMetaReducer(reducer: ActionReducer<any>) {
  return function(state: any, action: Action) {
    const nextState = reducer(state, action);
    
    // Skip saving to localStorage during initialization
    if (action.type !== '@ngrx/store/init') {
      localStorage.setItem('appState', JSON.stringify(nextState));
    }
    
    return nextState;
  };
}

export function hydrationMetaReducer(reducer: ActionReducer<any>) {
  return function(state: any, action: Action) {
    if (action.type === '@ngrx/store/init') {
      const storageValue = localStorage.getItem('appState');
      if (storageValue) {
        try {
          return JSON.parse(storageValue);
        } catch {
          localStorage.removeItem('appState');
        }
      }
    }
    return reducer(state, action);
  };
}

</boltAction>

<boltAction type="file" filePath="src/app/store/slices/auth.slice.ts">
import { createFeature, createReducer, on } from '@ngrx/store';
import { createActionGroup, props, emptyProps } from '@ngrx/store';

export interface AuthState {
  user: any | null;
  phone: string;
  countryCode: string;
  isAuthenticated: boolean;
}

// Initial state
const initialState: AuthState = {
  user: null,
  phone: '',
  countryCode: '+91',
  isAuthenticated: false
};

// Action group
export const AuthActions = createActionGroup({
  source: 'Auth',
  events: {
    'SetUser': props<{ user: any }>(),
    'SetPhone': props<{ phone: string; countryCode: string }>(),
    'ClearAuth': emptyProps(),
  }
});

// Feature creation with reducer
export const authFeature = createFeature({
  name: 'auth',
  reducer: createReducer(
    initialState,
    on(AuthActions.setUser, (state, { user }) => ({
      ...state,
      user,
      isAuthenticated: true
    })),
    on(AuthActions.setPhone, (state, { phone, countryCode }) => {
    console.log(phone,countryCode,"phone and countryCode")
      return {  ...state,
      phone,
      countryCode}
    }),
    on(AuthActions.clearAuth, () => initialState)
  )
});
</boltAction>

<boltAction type="file" filePath="src/app/store/slices/counter.slice.ts">
import { createFeature, createReducer, on } from '@ngrx/store';
import { createActionGroup, props, emptyProps } from '@ngrx/store';

// Action group
export const CounterActions = createActionGroup({
  source: 'Counter',
  events: {
    'Increment': props<{ amount: number }>(),
    'Decrement': props<{ amount: number }>(),
    'Reset': emptyProps(),
  }
});

// State interface
interface CounterState {
  count: number;
  isLoading: boolean;
}

// Initial state
const initialState: CounterState = {
  count: 0,
  isLoading: false
};

// Feature creation with reducer
export const counterFeature = createFeature({
  name: 'counter',  
  reducer: createReducer(
    initialState,
    on(CounterActions.increment, (state, { amount }) => ({ 
      ...state, 
      count: state.count + amount 
    })),
    on(CounterActions.decrement, (state, { amount }) => ({ 
      ...state, 
      count: state.count - amount 
    })),
    on(CounterActions.reset, (state) => ({ 
      ...state, 
      count: 0 
    }))
  )
});
</boltAction>

<boltAction type="file" filePath="src/app/store/slices/theme.slice.ts">
import { createFeature, createReducer, createSelector, emptyProps, on } from '@ngrx/store';
import { createActionGroup, props } from '@ngrx/store';
import { ThemeData, StoreDetails, Social, Pages, Timing, DomainPage } from '../../interfaces/theme.interface';

export const ThemeActions = createActionGroup({
  source: 'Theme',
  events: {
    'Set Theme Data': props<{ 
      theme: ThemeData; 
      store: StoreDetails;
      social: Social;
      pages: Pages;
      timing: Timing;
      domainPages: DomainPage[];
    }>(),
    'Clear Theme Data': emptyProps(),
  },
});

export interface ThemeState {
  theme: ThemeData | null;
  store: StoreDetails | null;
  social: Social | null;
  pages: Pages | null;
  timing: Timing | null;
  domainPages: DomainPage[] | null;
}

const initialState: ThemeState = {
  theme: null,
  store: null,
  social: null,
  pages: null,
  timing: null,
  domainPages: null
};

export const themeFeature = createFeature({
  name: 'theme',
  reducer: createReducer(
    initialState,
    on(ThemeActions.setThemeData, (state, { theme, store, social, pages, timing, domainPages }) => ({
      ...state,
      theme,
      store,
      social,
      pages,
      timing,
      domainPages
    })),
    on(ThemeActions.clearThemeData, () => initialState)
  ),
});

// Selectors
export const {
  selectTheme,
  selectStore,
  selectSocial,
  selectPages,
  selectTiming,
  selectDomainPages,
} = themeFeature;

// Custom selectors
export const selectStoreName = createSelector(
  selectStore,
  (store) => store?.name || ''
);

export const selectLogo = createSelector(
  selectTheme,
  (theme) => theme?.Logo || ''
);

export const selectThemeColors = createSelector(
  selectTheme,
  (theme) => theme?.colors?.current || null
); 
</boltAction>

<boltAction type="file" filePath="src/app/components/authentication/login/login.component.html">
<div 
  class="fixed inset-0 bg-black/30 backdrop-blur-sm z-40"
  @backdropAnimation
></div>

<div 
  role="dialog" 
  class="fixed left-[50%] top-[50%] z-50 w-full translate-x-[-50%] translate-y-[-50%] border bg-white shadow-lg rounded-lg sm:max-w-[425px]"
  @dialogAnimation
>
  <div class="relative w-full h-full">
    <!-- Close Button -->
    <button 
      type="button" 
      (click)="dialogRef.close()"
      class="absolute right-6 top-6 rounded-sm p-2 opacity-70 hover:bg-gray-100 transition-all duration-200"
    >
      <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
        <path d="M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z" 
              fill="currentColor" fill-rule="evenodd" clip-rule="evenodd">
        </path>
      </svg>
    </button>

    <!-- Form Content -->
    <form [formGroup]="loginForm" (ngSubmit)="onSubmit()" class="p-8">
      <div class="flex flex-col gap-8">
        <!-- Header -->
        <div class="flex flex-col gap-4 text-center">
          <p class="text-[24px] text-black font-[600]">Sign in</p>
          <p class="text-black font-normal">Sign in with your phone number</p>
        </div>

        <!-- Phone Input -->
        <div class="w-full gap-2 border h-[50px] items-center flex px-2 rounded-lg border-gray-300">
          <div class="h-[36px] min-w-[36px] bg-[var(--temp-back)] flex justify-center items-center rounded-lg">
            <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 512 512" 
                 class="text-white" height="20" width="20" xmlns="http://www.w3.org/2000/svg">
              <path d="M497.39 361.8l-112-48a24 24 0 0 0-28 6.9l-49.6 60.6A370.66 370.66 0 0 1 130.6 204.11l60.6-49.6a23.94 23.94 0 0 0 6.9-28l-48-112A24.16 24.16 0 0 0 122.6.61l-104 24A24 24 0 0 0 0 48c0 256.5 207.9 464 464 464a24 24 0 0 0 23.4-18.6l24-104a24.29 24.29 0 0 0-14.01-27.6z">
              </path>
            </svg>
          </div>
          
          <div class="relative cursor-pointer bg-transparent outline-none border-none h-[36px] flex items-center">
            +91
          </div>
          
          <input 
            #phoneInput
            type="text" 
            formControlName="phone"
            class="w-full outline-none border-none"
            placeholder="Phone number"
            inputmode="numeric" 
            pattern="[0-9]*"
            [attr.autoFocus]="false"
          />
        </div>


        <button [disabled]="!loginForm.valid" class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 shadow h-9 px-4 py-6 bg-white hover:bg-[var(--temp-back)] text-[var(--temp-back)] hover:text-white border-[var(--temp-back)] border-2 cursor-pointer" type="submit">Sign in</button>
      </div>
    </form>
  </div>
</div> 
</boltAction>

<boltAction type="file" filePath="src/app/components/authentication/login/login.component.ts">
import { Component, Inject, ViewChild, ElementRef, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DIALOG_DATA, DialogRef, DialogModule } from '@angular/cdk/dialog';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { animate, style, transition, trigger } from '@angular/animations';
import { AuthService } from '../../../services/auth.service';
import { ToastService } from '../../../services/toast.service';
import { Store } from '@ngrx/store';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, DialogModule],
  templateUrl: './login.component.html',
})
export class LoginPageComponent implements AfterViewInit {
  @ViewChild('phoneInput') phoneInput!: ElementRef;
  loginForm: FormGroup;

  constructor(
    private fb: FormBuilder,
    public dialogRef: DialogRef,
    private authService: AuthService,
    private toast: ToastService,
    private store: Store,
    @Inject(DIALOG_DATA) public data: { changePage: (page: number) => void }
  ) {
    this.loginForm = this.fb.group({
      phone: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]]
    });
  }

  ngAfterViewInit() {
    // Prevent auto-focus
    setTimeout(() => {
      if (this.phoneInput?.nativeElement) {
        this.phoneInput.nativeElement.blur();
      }
    }, 0);
  }

  onSubmit() {
    if (this.loginForm.valid) {
      const phone = this.loginForm.get('phone')?.value;
      
      this.authService.login('+91', phone).subscribe({
        next: (response) => {
          if (response.code === 200) {
            this.toast.success('OTP sent to your mobile number');
            this.data.changePage(1);
          } else {
            this.toast.error(response.message || 'Something went wrong');
          }
        },
        error: (error) => {
          console.error('Login error:', error);
          this.toast.error(error.error?.message || 'Failed to send OTP', 'Error', 5000);
        }
      });
    } else {
      this.toast.error('Please enter a valid phone number');
    }
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/authentication/otp-validation/otp-dialog.component.html">
<div 
  class="fixed inset-0 bg-black/30 backdrop-blur-sm z-40"
  @backdropAnimation
></div>

<div 
  role="dialog" 
  class="fixed left-[50%] top-[50%] z-50 w-full translate-x-[-50%] translate-y-[-50%] border bg-white shadow-lg rounded-lg sm:max-w-[425px]"
  @dialogAnimation
>
  <div class="relative w-full h-full">
    <!-- Close Button -->
    <button 
      type="button" 
      (click)="dialogRef.close()"
      class="absolute right-6 top-6 rounded-sm p-2 opacity-70 hover:bg-gray-100 transition-all duration-200"
    >
      <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
        <path d="M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z" 
              fill="currentColor" fill-rule="evenodd" clip-rule="evenodd">
        </path>
      </svg>
    </button>

    <!-- Form Content -->
    <div class="sm:p-6 bg-white flex flex-col gap-[24px] rounded-lg">
      <div>
        <h2 class="text-xl font-bold text-center mb-4 text-black">
          Verify Your Mobile Number
        </h2>
        <p class="text-center font-normal">
          We have sent you an SMS with a code to {{countryCode}} {{phone}}
          <span
            (click)="data.changePage(0)"
            class="text-[var(--temp-back)] ml-1 cursor-pointer"
          >
            Change Number?
          </span>
        </p>
      </div>

      <form [formGroup]="otpForm" (ngSubmit)="onSubmit()">
        <!-- OTP Input -->
        <div class="otp-inputs flex justify-around w-full">
          @for (i of [0,1,2,3,4,5]; track i) {
            <input
              #otpInput
              [id]="'otp-' + i"
              type="text"
              [formControlName]="'digit' + i"
              maxlength="1"
              class="w-12 outline-none rounded-none h-12 text-center text-xl border border-gray-300"
              (input)="onOtpInput($event, i)"
              (keydown)="onKeyDown($event, i)"
              inputmode="numeric"
              pattern="[0-9]*"
            />
          }
        </div>

        <div class="flex mt-6 justify-center">
          @if (timer > 0) {
            <p class="text-center text-sm text-[var(--temp-back)]">
              Resend OTP in {{timer}} seconds
            </p>
          } @else {
            <p class="text-center text-sm">
              Didn't receive the OTP?
              <span
                class="text-[var(--temp-back)] text-md cursor-pointer"
                (click)="resendOtp()"
              >
                Resend
              </span>
            </p>
          }
        </div>

        <button 
          type="submit"
          [disabled]="!otpForm.valid"
          class="w-full mt-6 inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 shadow h-9 px-4 py-6 bg-white hover:bg-[var(--temp-back)] text-[var(--temp-back)] hover:text-white border-[var(--temp-back)] border-2 cursor-pointer"
        >
          Verify
        </button>
      </form>
    </div>
  </div>
</div> 
</boltAction>

<boltAction type="file" filePath="src/app/components/authentication/otp-validation/otp-dialog.component.ts">
import { Component, Inject, OnDestroy, OnInit, ViewChildren, QueryList, ElementRef, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DIALOG_DATA, DialogRef, DialogModule } from '@angular/cdk/dialog';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { animate, style, transition, trigger } from '@angular/animations';
import { Store } from '@ngrx/store';
import { authFeature } from '../../../store/slices/auth.slice';
import { AuthService } from '../../../services/auth.service';
import { Subject, takeUntil } from 'rxjs';
import { ToastService } from '../../../services/toast.service';
import { CartPopupService } from '../../../services/cart-popup.service';    
@Component({
  selector: 'app-otp-dialog',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, DialogModule],
  templateUrl: './otp-dialog.component.html',
  animations: [
   
    trigger('backdropAnimation', [
      transition(':enter', [
        style({ opacity: 0 }),
        animate('200ms ease-out', style({ opacity: 1 }))
      ]),
      transition(':leave', [
        animate('200ms ease-in', style({ opacity: 0 }))
      ])
    ])
  ]
})
export class OtpDialogComponent implements OnDestroy, OnInit {
  @ViewChildren('otpInput') otpInputs!: QueryList<ElementRef>;
  
  otpForm: FormGroup;
  private destroy$ = new Subject<void>();
  phone: string = '';
  countryCode: string = '';
  timer: number = 30;
  resendAvailable: boolean = false;

  constructor(
    private fb: FormBuilder,
    public dialogRef: DialogRef,
    @Inject(DIALOG_DATA) public data: { changePage: (page: number) => void },
    private authService: AuthService,
    private toast: ToastService,
    private store: Store,
    private cartPopupService: CartPopupService = inject(CartPopupService)
  ) {
    this.store.select(authFeature.selectAuthState)
      .pipe(takeUntil(this.destroy$))
      .subscribe(state => {
        if (state) {
          this.phone = state.phone;
          this.countryCode = state.countryCode;
        }
      });

    this.otpForm = this.fb.group({
      digit0: ['', [Validators.required, Validators.pattern('^[0-9]$')]],
      digit1: ['', [Validators.required, Validators.pattern('^[0-9]$')]],
      digit2: ['', [Validators.required, Validators.pattern('^[0-9]$')]],
      digit3: ['', [Validators.required, Validators.pattern('^[0-9]$')]],
      digit4: ['', [Validators.required, Validators.pattern('^[0-9]$')]],
      digit5: ['', [Validators.required, Validators.pattern('^[0-9]$')]]
    });
  }

  ngOnInit() {
    this.startTimer();
  }

  startTimer() {
    const interval = setInterval(() => {
      if (this.timer > 0) {
        this.timer--;
      } else {
        this.resendAvailable = true;
        clearInterval(interval);
      }
    }, 1000);
  }

  onOtpInput(event: Event, index: number) {
    const input = event.target as HTMLInputElement;
    let value = input.value;

    // Remove any non-numeric characters
    value = value.replace(/[^0-9]/g, '');
    
    // Update the input with cleaned value
    input.value = value;
    this.otpForm.get(`digit${index}`)?.setValue(value);

    // Move to next input if value exists
    if (value && index < 5) {
      const inputsArray = this.otpInputs.toArray();
      if (inputsArray[index + 1]) {
        inputsArray[index + 1].nativeElement.focus();
      }
    }

    // If pasting multiple numbers
    if (value.length > 1) {
      const values = value.split('');
      for (let i = 0; i < values.length && index + i < 6; i++) {
        this.otpForm.get(`digit${index + i}`)?.setValue(values[i]);
      }
      // Focus the next empty input or the last input
      const inputsArray = this.otpInputs.toArray();
      for (let i = index; i < 6; i++) {
        if (!this.otpForm.get(`digit${i}`)?.value && inputsArray[i]) {
          inputsArray[i].nativeElement.focus();
          break;
        }
      }
    }
  }

  onKeyDown(event: KeyboardEvent, index: number) {
    if (event.key === 'Backspace' && index > 0 && !this.otpForm.get(`digit${index}`)?.value) {
      const inputsArray = this.otpInputs.toArray();
      if (inputsArray[index - 1]) {
        inputsArray[index - 1].nativeElement.focus();
      }
    }
  }

  resendOtp() {
    if (this.phone && this.countryCode) {
      this.authService.login(this.countryCode, this.phone).subscribe({
        next: (response) => {
          if (response.code === 200) {
            this.toast.success('OTP sent to your mobile number');
            this.timer = 30;
            this.resendAvailable = false;
            this.startTimer();
          } else {
            this.toast.error(response.message || 'Failed to resend OTP');
          }
        },
        error: (error) => {
          this.toast.error(error.error?.message || 'Failed to resend OTP', 'Error', 5000);
        }
      });
    } else {
      this.toast.error('Unable to resend OTP');
    }
  }

  onSubmit() {
    if (this.otpForm.valid && this.phone && this.countryCode) {
      const otp = Object.values(this.otpForm.value).join('');
      
      this.authService.verifyOtp(this.countryCode, this.phone, otp).subscribe({
        next: (response) => {
          if (response.code === 201) {
            this.toast.success('Successfully logged in');
            this.dialogRef.close();
            this.cartPopupService.close();
          }
        },
        error: (error) => {
          this.toast.error('OTP you entered is invalid. Kindly try again or resend it.', 'Error', 5000);
          // Reset OTP form
          Object.keys(this.otpForm.controls).forEach(key => {
            this.otpForm.get(key)?.setValue('');
          });
        }
      });
    } else {
      this.toast.error('Please enter a valid OTP');
    }
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/food/addon-selector/addon-selector.component.html">
<div class="mx-[3.8%] mb-2">
  <div *ngFor="let addonGroup of getAddonGroups()" class="rounded-[10px] border-2 mb-4">
    <div class="flex item-center flex-col border-b-2 py-[1%] px-4">
      <div class="flex justify-between items-center cursor-pointer">
        <p>{{addonGroup.addon_group_name}}</p>
        <div class="flex items-center gap-4">
          <p class="text-gray-500 text-sm">
            ({{selectedAddons[addonGroup.addon_group_id]?.length || 0}}/{{getAddonMaxLimit(addonGroup)}})
          </p>
          <p>
            <svg width="12" height="8" viewBox="0 0 12 8" xmlns="http://www.w3.org/2000/svg">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M0.599927 6.99625C0.866626 7.26791 1.29903 7.26791 1.56573 6.99625L5.9999 2.47945L10.4341 6.99625C10.7008 7.26791 11.1332 7.26791 11.3999 6.99625C11.6666 6.72458 11.6666 6.28411 11.3999 6.01244L6.4828 1.00375C6.21611 0.732079 5.7837 0.732079 5.517 1.00375L0.599927 6.01244C0.333227 6.28411 0.333227 6.72458 0.599927 6.99625Z" fill="#0C1D2E"/>
            </svg>
          </p>
        </div>
      </div>
      <div *ngIf="getAddonMinLimit(addonGroup) > 0" class="text-xs text-gray-500 flex items-end justify-end">
        Select at least {{getAddonMinLimit(addonGroup)}} option
      </div>
    </div>
    <div class="px-[16px] py-[1px] max-h-[20vh] custom-scrollbar overflow-y-auto">
      <div *ngFor="let item of addonGroup.addon_group_items" 
           class="flex justify-between relative items-center mb-1">
        <div class="flex items-center">
          <input type="checkbox" 
                 [id]="'addon-' + addonGroup.addon_group_id + '-' + item.addonitemid"
                 [checked]="isAddonSelected(addonGroup, item.addonitemid)"
                 (click)="onAddonSelect(addonGroup, item.addonitemid)"
                 class="mr-2">
          <label [for]="'addon-' + addonGroup.addon_group_id + '-' + item.addonitemid" 
                 class="cursor-pointer">
            {{item.addonitem_name}}
          </label>
        </div>
        <div class="text-gray-500 flex items-center">
          <div class="font-[550] pr-[2px]">INR</div>{{item.addonitem_price}}
        </div>
      </div>
    </div>
  </div>
</div> 
</boltAction>

<boltAction type="file" filePath="src/app/components/food/addon-selector/addon-selector.component.ts">
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FoodItem, AddonDetail } from '../../../interfaces/food.interface';
import { ValidationService } from '../../../services/validation.service';

@Component({
  selector: 'app-addon-selector',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './addon-selector.component.html'
})
export class AddonSelectorComponent {
  @Input() item!: FoodItem;
  @Output() priceUpdated = new EventEmitter<void>();
  @Output() addonSelected = new EventEmitter<{groupId: string, itemId: string}>();
  
  selectedAddons: { [key: string]: string[] } = {};

  constructor(private validationService: ValidationService) {}

  getAddonGroups(): AddonDetail[] {
    if (!this.item.addon || !this.item.addonDetails) return [];
    return this.item.addonDetails.filter(addon =>
      this.item.addon.some(a => a.addon_group_id === addon.addon_group_id)
    );
  }

  getAddonMaxLimit(addonGroup: AddonDetail): number {
    const addon = this.item.addon?.find(a => a.addon_group_id === addonGroup.addon_group_id);
    return addon?.addon_item_selection_max ? Number(addon.addon_item_selection_max) : 1;
  }

  getAddonMinLimit(addonGroup: AddonDetail): number {
    const addon = this.item.addon?.find(a => a.addon_group_id === addonGroup.addon_group_id);
    return addon?.addon_item_selection_min ? Number(addon.addon_item_selection_min) : 0;
  }

  onAddonSelect(addonGroup: AddonDetail, addonItemId: string) {
    const groupId = addonGroup.addon_group_id;
    if (!this.selectedAddons[groupId]) {
      this.selectedAddons[groupId] = [];
    }

    const index = this.selectedAddons[groupId].indexOf(addonItemId);
    if (index === -1) {
      if (this.selectedAddons[groupId].length < this.getAddonMaxLimit(addonGroup)) {
        this.selectedAddons[groupId].push(addonItemId);
      } else {
        this.validationService.updateMessage(`You can select maximum ${this.getAddonMaxLimit(addonGroup)} option(s) from ${addonGroup.addon_group_name}`);
        return;
      }
    } else {
      this.selectedAddons[groupId].splice(index, 1);
    }

    this.validationService.clearMessage();
    this.addonSelected.emit({groupId, itemId: addonItemId});
    this.priceUpdated.emit();
  }

  isAddonSelected(addonGroup: AddonDetail, addonItemId: string): boolean {
    return this.selectedAddons[addonGroup.addon_group_id]?.includes(addonItemId) || false;
  }

  validateSelections(): boolean {
    return this.validationService.validateAddonSelections(this.getAddonGroups(), this.selectedAddons);
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/food/food-card/food-card.component.html">
<div (click)="showMenuPopUp()" class="overflow-hidden" style="opacity: 1; transform: none;">
  <div class="py-2 h-full rounded-lg flex flex-col">
    <div class="flex flex-col h-full">
      <!-- Image -->
      <img [src]="item.item_image_url" 
           [alt]="item.item_name" 
           class="aspect-[12/8] w-full object-cover rounded-t-xl cursor-pointer"
           onerror="this.src='https://i.ibb.co/27bP0Yrh/broken-Image-Menu-CM38dt-NR.jpg'"
        >

      <div class="w-full px-3 flex flex-col flex-grow bg-white rounded-b-xl">
        <!-- Header -->
        <div class="grid grid-cols-[auto_1fr_auto] gap-2 my-2">
          <div class="flex py-1">
            <app-veg-icon></app-veg-icon>
            <!-- <app-veg-icon [isVeg]="item.item_attribute_id === '1'"></app-veg-icon> -->
          </div>
          <p class="text-[16px] font-[400] cursor-pointer">{{item.item_name}}</p>
          <div>
            <app-heart-icon [filled]="itemFavorite"></app-heart-icon>
          </div>
        </div>

        <!-- Description -->
        <div class="flex-grow">
          <p class="text-sm text-gray-600" *ngIf="item.item_description">
            {{item.item_description}}
          </p>
        </div>

        <!-- Footer -->
        <div class="mt-2">
          <div class="flex justify-between items-end">
            <div>
              <p class="flex items-center text-[14px] font-[550]">
                <span class="font-[550] pr-[2px]">INR</span> 
                {{basePrice}}
              </p>
              <p class="text-[var(--temp-back)] text-[11px] cursor-pointer" 
                 *ngIf="hasVariations || hasAddons">
                Customisation Available
              </p>
            </div>

            <!-- Quantity Controls -->
            <ng-container *ngIf="quantity === 0; else quantityControls">
              <app-plus-icon (click)="incrementQuantity($event, true)"></app-plus-icon>
            </ng-container>
            
            <ng-template #quantityControls>
              <div class="flex justify-end items-center gap-2">
                <app-minus-icon (click)="decrementQuantity($event)"></app-minus-icon>
                <span class="text-lg">{{ quantity }}</span>
                <app-plus-icon (click)="incrementQuantity($event, false)"></app-plus-icon>
              </div>
            </ng-template>
          </div>
        </div>

      </div>
    </div>
  </div>
</div>

<!-- Popups -->
@if (isShowFoodPopUp === item._id) {
  <app-food-info-popup
    [item]="item"
    (close)="closePopup()">
  </app-food-info-popup>
}

@if (isShowMenuPopUp === item._id) {
  <app-menu-popup
    [item]="item"
    [itemFavorite]="itemFavorite"
    (close)="closePopup()"
    (setFavoriteItems)="setFavoriteItems($event)"
    (onVariationSelect)="handleVariationSelect($event)">
  </app-menu-popup>
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/food/food-card/food-card.component.ts">
import { Component, Input, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FoodItem, Nutrition } from '../../../interfaces/food.interface';
import { HeartIconComponent, VegIconComponent, InfoArrowIconComponent, MinusIconComponent, PlusIconComponent } from '../../../icons/foodcard-icons.component';
import { MenuPopupComponent } from '../menu-popup/menu-popup.component';
import { FoodInfoPopupComponent } from '../food-info-popup/food-info-popup.component';
import { VariationAddonSelectorComponent } from '../variation-addon-selector/variation-addon-selector.component';
import { CartService } from '../../../services/cart.service';
import { ToastService } from '../../../services/toast.service';
@Component({
  selector: 'app-food-card',
  standalone: true,
  imports: [
    CommonModule,
    HeartIconComponent,
    VegIconComponent,
    InfoArrowIconComponent,
    MinusIconComponent,
    PlusIconComponent,
    MenuPopupComponent,
    FoodInfoPopupComponent,
    VariationAddonSelectorComponent
  ],
  templateUrl: './food-card.component.html'
})
export class FoodCardComponent implements OnInit {
  @Input() item!: FoodItem;
  @Input() isItemInCart: boolean = false;
  @Input() itemFavorite: boolean = false;
  @Input() variation: boolean = false;

  isShowFoodPopUp: string | null = null;
  isShowMenuPopUp: string | null = null;
  isShowPreviousPopUp: string | null = null;

  itemType: 'variation' | 'variationSelector' | 'addonSelector' = 'variation';
  parsedNutrition: Nutrition | null = null;
  displayPrice: string = '0';
  hasVariations: boolean = false;
  hasAddons: boolean = false;
  basePrice: string = '0';
  nutrition: any;
  quantity: number = 0;

  constructor(private cartService: CartService, private toast: ToastService) {}

  ngOnInit() {
    this.initializeComponent();
    this.updateQuantity();
    // Subscribe to cart changes
    this.cartService.cartItems$.subscribe(() => {
      this.updateQuantity();
    });
  }

  private initializeComponent() {
    this.determineItemType();
    this.setDisplayPrice();
    this.hasVariations = this.item.item_allow_variation === '1' && this.item.variation?.length > 0;
    this.hasAddons = this.item.addon?.length > 0 && this.item.addonDetails?.length > 0;
    
    // Set base price based on variations
    if (this.hasVariations) {
      const lowestPriceVariation = this.item.variation
        .filter(v => v.active === '1')
        .sort((a, b) => parseFloat(a.price) - parseFloat(b.price))[0];
      this.basePrice = lowestPriceVariation?.price || '0';
    } else {
      this.basePrice = this.item.price;
    }

    // Parse nutrition
    if (typeof this.item.nutrition === 'string') {
      try {
        this.parsedNutrition = JSON.parse(this.item.nutrition);
      } catch (e) {
        this.parsedNutrition = null;
      }
    } else {
      this.parsedNutrition = this.item.nutrition;
    }
  }

  private determineItemType() {
    if (this.item.item_allow_variation === '1' && this.item.variation.length > 0) {
      // Check if variations have addons
      const hasVariationAddons = this.item.variation.some(v => v.variationallowaddon === 1);
      this.itemType = hasVariationAddons ? 'variationSelector' : 'variation';
    } else if (this.item.addon.length > 0) {
      this.itemType = 'addonSelector';
    }
  }

  private setDisplayPrice() {
    if (this.itemType === 'addonSelector') {
      this.displayPrice = this.item.price;
    } else if (this.item.variation.length > 0) {
      // Get the minimum price from variations
      const prices = this.item.variation
        .map(v => parseFloat(v.price))
        .filter(p => !isNaN(p));

      this.displayPrice = prices.length > 0 ? Math.min(...prices).toString() : '0';
    }
  }

  hasCustomization(): boolean {
    return this.itemType === 'variationSelector' || 
           this.itemType === 'addonSelector' || 
           (this.itemType === 'variation' && this.item.variation.length > 0);
  }

  closePopup() {
    this.isShowFoodPopUp = null;
    this.isShowMenuPopUp = null;
    this.isShowPreviousPopUp = null;
  }

  handleVariationSelect(variation: any) {
    console.log('Selected variation:', variation);
  }

  showFoodPopUp() {
    this.isShowFoodPopUp = this.item._id;
  }

  showMenuPopUp() {
    console.log('Opening menu popup for item:', this.item._id);
    this.isShowMenuPopUp = this.item._id;
  }

  setFavoriteItems(event: any) {
    console.log('Favorite items:', event);
  }

  updateQuantity() {
    this.cartService.cartItems$.subscribe(cartItems => {
      const cartItem = cartItems.find(cartItem => 
        cartItem.item_id === this.item.item_id
      );
      this.quantity = cartItem ? cartItem.quantity : 0;
    });
  }

  incrementQuantity(event: Event, flag: boolean) {
    if(!flag){
      event.stopPropagation();   
    }
 
    if(flag){
      return;
    }

    this.cartService.getCartItems().subscribe(cartItemsincrementQuantity => {
      const cartItem = cartItemsincrementQuantity.results.find((cartItemincrementQuantity: any) => 
         cartItemincrementQuantity.items_details._id === this.item._id
      );
      if(!cartItem){
        this.toast.error('item not found in cart')
      }
      this.cartService.updateQuantity(cartItem?._id, this.quantity + 1).subscribe();
    });
  }

  decrementQuantity(event: Event) {
    event.stopPropagation();
    if (this.quantity > 0) {
      this.cartService.getCartItems().subscribe(cartItemsdecrementQuantity => {
        const cartItem = cartItemsdecrementQuantity.results.find((cartItemsdecrementQuantity: any) => 
           cartItemsdecrementQuantity.items_details._id === this.item._id
        );
        if(!cartItem){
          this.toast.error('item not found in cart')
        }
        this.cartService.updateQuantity(cartItem?._id, this.quantity - 1).subscribe();
      });
    }
  }
} 


// fix the logic for the quantity control 
// show the basic checkout page. 
</boltAction>

<boltAction type="file" filePath="src/app/components/food/food-info-popup/food-info-popup.component.ts">
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FoodItem } from '../../../interfaces/food.interface';

@Component({
  selector: 'app-food-info-popup',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="fixed inset-0 z-50 flex items-center justify-center">
      <div class="absolute inset-0 bg-black opacity-50" (click)="close.emit()"></div>
      
      <div class="relative bg-white w-full max-w-md rounded-lg shadow-lg p-4">
        <button (click)="close.emit()" class="absolute top-2 right-2">
          <span class="sr-only">Close</span>
          <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>

        <h2 class="text-xl font-semibold mb-4">{{item.item_name}}</h2>
        
        @if (item.nutrition) {
          <div class="space-y-2">
            <h3 class="font-medium">Nutrition Information</h3>
            <div class="grid grid-cols-2 gap-4">
              @if (nutrition.calories) {
                <div>
                  <p class="text-sm text-gray-600">Calories</p>
                  <p>{{nutrition.calories.amount}} {{nutrition.calories.unit}}</p>
                </div>
              }
              @if (nutrition.protien) {
                <div>
                  <p class="text-sm text-gray-600">Protein</p>
                  <p>{{nutrition.protien.amount}} {{nutrition.protien.unit}}</p>
                </div>
              }
              @if (nutrition.carbohydrate) {
                <div>
                  <p class="text-sm text-gray-600">Carbohydrates</p>
                  <p>{{nutrition.carbohydrate.amount}} {{nutrition.carbohydrate.unit}}</p>
                </div>
              }
              @if (nutrition.totalFat) {
                <div>
                  <p class="text-sm text-gray-600">Total Fat</p>
                  <p>{{nutrition.totalFat.amount}} {{nutrition.totalFat.unit}}</p>
                </div>
              }
            </div>
          </div>
        }
      </div>
    </div>
  `
})
export class FoodInfoPopupComponent {
  @Input() item!: FoodItem;
  @Output() close = new EventEmitter<void>();

  get nutrition() {
    if (typeof this.item.nutrition === 'string') {
      try {
        return JSON.parse(this.item.nutrition);
      } catch {
        return {};
      }
    }
    return this.item.nutrition || {};
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/food/menu-popup/menu-popup.component.html">
<!-- Overlay -->
<div class="fixed inset-0   backdrop-blur-[2px] bg-black/50 bg-opacity-50 z-40 flex items-center justify-center overflow-y-auto">
  <!-- Popup Container -->
  <div class="relative bg-white rounded-[10px] xl:max-w-[45%] lg:max-w-[45%] md:max-w-[60%] sm:max-w-[80%] w-[95%] h-fit my-8 mx-auto">
    <!-- Close Button -->
    <button (click)="close.emit()" class="absolute lg:w-[40px] lg:h-[40px] w-[20px] h-[20px] lg:-right-11 -right-2 top-2 lg:top-0 sm:bg-[#0C1D2E] bg-white sm:opacity-70 sm:text-white font-bold flex items-center justify-center rounded-full z-50">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
        <path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>

    <!-- Content Container with max height and scrolling -->
    <div class="max-h-[85vh] overflow-y-auto">
      <!-- Header Section -->
      <div class="p-4">
        <span class="flex justify-between items-center">
          <div class="flex gap-2">
            <!-- Veg/Non-veg Indicator -->
            <div class="flex py-1">
              <div>
                <div class="h-4 w-4 border border-green-600 flex items-center justify-center cursor-pointer">
                  <div class="h-2 w-2 bg-green-600 rounded-full"></div>
                </div>
              </div>
            </div>
            <!-- Item Name -->
            <h2 class="text-[16px] text-[#0C1D2E] font-semibold flex flex-wrap items-center gap-2">
              {{item_name}}
              <span *ngIf="variation_name"><p class="text-sm">({{variation_name}})</p></span>
            </h2>
          </div>
          <!-- Favorite Icon -->
          <div>
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="25" viewBox="0 0 24 25" fill="none" class="cursor-pointer">
              <path d="M20.8405 4.77676C20.3297 4.26576 19.7233 3.8604 19.0558 3.58384C18.3884 3.30728 17.673 3.16493 16.9505 3.16493C16.228 3.16493 15.5126 3.30728 14.8451 3.58384C14.1777 3.8604 13.5712 4.26576 13.0605 4.77676L12.0005 5.83676L10.9405 4.77676C9.90879 3.74507 8.50952 3.16547 7.05049 3.16547C5.59145 3.16547 4.19218 3.74507 3.16049 4.77676C2.12879 5.80845 1.54919 7.20772 1.54919 8.66676C1.54919 10.1258 2.12879 11.5251 3.16049 12.5568L4.22048 13.6168L12.0005 21.3968L19.7805 13.6168L20.8405 12.5568C21.3515 12.046 21.7568 11.4396 22.0334 10.7721C22.31 10.1047 22.4523 9.38925 22.4523 8.66676C22.4523 7.94427 22.31 7.22886 22.0334 6.5614C21.7568 5.89394 21.3515 5.28751 20.8405 4.77676V4.77676Z" stroke="#748BA0" stroke-width="1.3" stroke-linecap="round" stroke-linejoin="round" fill="none"/>
            </svg>
          </div>
        </span>

        <!-- Description & Details -->
        <p class="pt-[12px] text-[16px] text-gray-400">{{description}}</p>
        <p *ngIf="nutrition" class="text-[14px] text-[#748BA0] font-[400] cursor-pointer">{{nutrition}}</p>
        <div class="lg:text-[20px] text-[16px] pt-[12px] sm:mb-4 flex items-center">
          <div class="font-[550] pr-[2px]">INR</div>{{price}}
        </div>

        <!-- Quantity Controls -->
        <div class="flex gap-[5%] justify-end items-end pt-[1%]">
          <!-- Note Button -->
          <div class="sm:w-[15%] w-[12%] sm:h-[7.8vh] h-[6vh] rounded-[10px] flex justify-center items-center bg-[#edf0f0] cursor-pointer">
            <svg width="19" height="21" viewBox="0 0 19 21" fill="#0C1D2E" xmlns="http://www.w3.org/2000/svg"><path d="M13.2835 9.15002C13.2835 8.7358 12.9322 8.40002 12.4989 8.40002H4.41809C3.98479 8.40002 3.63354 8.7358 3.63354 9.15002C3.63354 9.56425 3.98479 9.90002 4.41809 9.90002H12.4989C12.9322 9.90002 13.2835 9.56425 13.2835 9.15002Z" fill="#0C1D2E"></path><path d="M4.41809 11.4C3.98479 11.4 3.63354 11.7358 3.63354 12.15C3.63354 12.5642 3.98479 12.9 4.41809 12.9H9.32587C9.75918 12.9 10.1104 12.5642 10.1104 12.15C10.1104 11.7358 9.75918 11.4 9.32587 11.4H4.41809Z" fill="#0C1D2E"></path><path d="M6.26208 18.6H3.63819C2.77299 18.6 2.0691 17.9271 2.0691 17.1V3.90002C2.0691 3.07292 2.77299 2.40002 3.63819 2.40002H13.2838C14.149 2.40002 14.8529 3.07292 14.8529 3.90002V8.51251C14.8529 8.92674 15.2041 9.26251 15.6374 9.26251C16.0707 9.26251 16.422 8.92674 16.422 8.51251V3.90002C16.422 2.24582 15.0142 0.900024 13.2838 0.900024H3.63819C1.90779 0.900024 0.5 2.24582 0.5 3.90002V17.1C0.5 18.7542 1.90779 20.1 3.63819 20.1H6.26208C6.69538 20.1 7.04662 19.7642 7.04662 19.35C7.04662 18.9358 6.69538 18.6 6.26208 18.6Z" fill="#0C1D2E"></path><path d="M17.8115 11.7591C16.8938 10.8818 15.4007 10.8817 14.4836 11.7585L10.1763 15.867C10.0848 15.9542 10.0173 16.0617 9.97975 16.1799L9.0417 19.1321C8.95854 19.3938 9.03099 19.678 9.23082 19.8738C9.38051 20.0205 9.58387 20.1001 9.79244 20.1001C9.86222 20.1001 9.93268 20.0912 10.0018 20.0728L13.1685 19.2343C13.2988 19.1998 13.4176 19.1337 13.5133 19.0423L17.8115 14.9411C18.7292 14.0638 18.7292 12.6364 17.8115 11.7591ZM12.5508 17.8414L10.9577 18.2633L11.4239 16.7959L14.3302 14.0238L15.44 15.0846L12.5508 17.8414ZM16.7026 13.88L16.5506 14.025L15.441 12.9643L15.5925 12.8198C15.8984 12.5274 16.3961 12.5274 16.702 12.8198C17.0079 13.1122 17.0079 13.588 16.7026 13.88Z" fill="#0C1D2E"></path><path d="M12.4989 5.40002H4.41809C3.98479 5.40002 3.63354 5.7358 3.63354 6.15002C3.63354 6.56425 3.98479 6.90002 4.41809 6.90002H12.4989C12.9322 6.90002 13.2835 6.56425 13.2835 6.15002C13.2835 5.7358 12.9322 5.40002 12.4989 5.40002Z" fill="#0C1D2E"></path></svg>              <!-- Note icon paths -->
          </div>
          <!-- Counter -->
          <div class="w-[38%] sm:h-[7.8vh] h-[6vh] p-[13px] rounded-[10px] gap-[31%] flex justify-center items-center bg-[#edf0f0]">
            <p class="cursor-pointer flex items-center" (click)="decrementQuantity($event)">
              <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 448 512" color="#748BA0" height="1em" width="1em">
                <path d="M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z"/>
              </svg>
            </p>
            <p class="text-center flex items-center text-[18px] font-bold text-[#748BA0]">{{quantity}}</p>
            <p class="cursor-pointer flex items-center" (click)="incrementQuantity($event)">
              <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 448 512" color="#748BA0" height="1em" width="1em">
                <path d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z"/>
              </svg>
            </p>
          </div>
        </div>
      </div>

      <!-- Variations Only -->
      <app-variation-selector
        *ngIf="hasOnlyVariations()"
        [item]="item"
        (priceUpdated)="onPriceUpdated($event)">
      </app-variation-selector>

      <!-- Variations with Addons -->
      <app-variation-addon-selector
        *ngIf="hasVariationsWithAddons()"
        [item]="item"
        (priceUpdated)="onPriceUpdated($event)">
      </app-variation-addon-selector>

      <!-- Only Addons -->
      <!-- <app-addon-selector
        *ngIf="hasOnlyAddons()"
        [item]="item"
        (priceUpdated)="updateTotalPrice()">
      </app-addon-selector> -->
    </div>

    <!-- Footer Section -->
    <div class="border-t-2 border-[hsl(var(--border))] lg:rounded-b-[10px] items-center flex justify-between py-[8px] sm:px-[24px] px-4">
      <div class="price-display">
        <div class="font-[550] pr-[2px]">INR {{totalPrice}} </div>
      </div>
      <button (click)="handleAddToCart($event)" class="sm:px-[20%] lg:px-4 px-4 flex gap-2 py-[2%] items-center text-white rounded-[10px] text-[16px] font-bold bg-[var(--temp-back)]">
        <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 448 512" height="1em" width="1em">
          <path d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z"/>
        </svg>
        Add to Cart
      </button>
    </div>

   
  </div>
</div> 






<!-- <svg width="19" height="21" viewBox="0 0 19 21" fill="#0C1D2E" xmlns="http://www.w3.org/2000/svg"><path d="M13.2835 9.15002C13.2835 8.7358 12.9322 8.40002 12.4989 8.40002H4.41809C3.98479 8.40002 3.63354 8.7358 3.63354 9.15002C3.63354 9.56425 3.98479 9.90002 4.41809 9.90002H12.4989C12.9322 9.90002 13.2835 9.56425 13.2835 9.15002Z" fill="#0C1D2E"></path><path d="M4.41809 11.4C3.98479 11.4 3.63354 11.7358 3.63354 12.15C3.63354 12.5642 3.98479 12.9 4.41809 12.9H9.32587C9.75918 12.9 10.1104 12.5642 10.1104 12.15C10.1104 11.7358 9.75918 11.4 9.32587 11.4H4.41809Z" fill="#0C1D2E"></path><path d="M6.26208 18.6H3.63819C2.77299 18.6 2.0691 17.9271 2.0691 17.1V3.90002C2.0691 3.07292 2.77299 2.40002 3.63819 2.40002H13.2838C14.149 2.40002 14.8529 3.07292 14.8529 3.90002V8.51251C14.8529 8.92674 15.2041 9.26251 15.6374 9.26251C16.0707 9.26251 16.422 8.92674 16.422 8.51251V3.90002C16.422 2.24582 15.0142 0.900024 13.2838 0.900024H3.63819C1.90779 0.900024 0.5 2.24582 0.5 3.90002V17.1C0.5 18.7542 1.90779 20.1 3.63819 20.1H6.26208C6.69538 20.1 7.04662 19.7642 7.04662 19.35C7.04662 18.9358 6.69538 18.6 6.26208 18.6Z" fill="#0C1D2E"></path><path d="M17.8115 11.7591C16.8938 10.8818 15.4007 10.8817 14.4836 11.7585L10.1763 15.867C10.0848 15.9542 10.0173 16.0617 9.97975 16.1799L9.0417 19.1321C8.95854 19.3938 9.03099 19.678 9.23082 19.8738C9.38051 20.0205 9.58387 20.1001 9.79244 20.1001C9.86222 20.1001 9.93268 20.0912 10.0018 20.0728L13.1685 19.2343C13.2988 19.1998 13.4176 19.1337 13.5133 19.0423L17.8115 14.9411C18.7292 14.0638 18.7292 12.6364 17.8115 11.7591ZM12.5508 17.8414L10.9577 18.2633L11.4239 16.7959L14.3302 14.0238L15.44 15.0846L12.5508 17.8414ZM16.7026 13.88L16.5506 14.025L15.441 12.9643L15.5925 12.8198C15.8984 12.5274 16.3961 12.5274 16.702 12.8198C17.0079 13.1122 17.0079 13.588 16.7026 13.88Z" fill="#0C1D2E"></path><path d="M12.4989 5.40002H4.41809C3.98479 5.40002 3.63354 5.7358 3.63354 6.15002C3.63354 6.56425 3.98479 6.90002 4.41809 6.90002H12.4989C12.9322 6.90002 13.2835 6.56425 13.2835 6.15002C13.2835 5.7358 12.9322 5.40002 12.4989 5.40002Z" fill="#0C1D2E"></path></svg> -->
</boltAction>

<boltAction type="file" filePath="src/app/components/food/menu-popup/menu-popup.component.ts">
import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FoodItem, Nutrition, Variation, AddonGroupItem, AddonDetail, VariationAddon } from '../../../interfaces/food.interface';
import { VariationSelectorComponent } from '../variation-selector/variation-selector.component';
import { VariationAddonSelectorComponent } from '../variation-addon-selector/variation-addon-selector.component';
import { AddonSelectorComponent } from '../addon-selector/addon-selector.component';
import { CartService } from '../../../services/cart.service';
import { ToastService } from '../../../services/toast.service';
@Component({
  selector: 'app-menu-popup',
  standalone: true,
  imports: [CommonModule, FormsModule, VariationSelectorComponent, VariationAddonSelectorComponent, AddonSelectorComponent],
  templateUrl: './menu-popup.component.html'
})
export class MenuPopupComponent implements OnInit {
  @Input() item!: FoodItem;
  @Input() itemFavorite: boolean = false;
  @Output() close = new EventEmitter<void>();
  @Output() addToCart = new EventEmitter<any>();
  @Output() setFavoriteItems = new EventEmitter<any>();

  itemType: 'basic' | 'variation' | 'addon' | 'variation-addon' = 'basic';
  selectedVariation: Variation | null = null;
  selectedAddons: { [key: string]: AddonGroupItem[] } = {};
  notes: string = '';
  quantity: number = 0;
  showTextarea: boolean = false;
  item_name: string = '';
  variation_name: string = '';
  description: string = '';
  nutrition: string | null = '';
  price: string = '';
  total_price: string = '';
  parsedNutrition: Nutrition | null = null;
  uniqueVariations: Variation[] = [];
  totalPrice: number = 0;

  constructor(private cartService: CartService, private toast: ToastService) {
    this.cartService.cartItems$.subscribe(cartItems => {
      const cartItem = cartItems.find(cartItem => 
        cartItem.item_id === this.item.item_id
      );
      this.quantity = cartItem ? cartItem.quantity : 0;
    });
  }

  ngOnInit() {
    this.determineItemType();
    if (this.item) {
      this.initializeItemDetails();
      this.initializeVariations();
      this.initializePrice();
    }
    this.updateQuantity();
  }

  private determineItemType() {
    const hasVariation = this.item.variation?.length > 0;
    const hasVariationAddons = this.item.variationAddonDetails?.length > 0;
    const hasAddons = this.item.addon?.length > 0 && this.item.addonDetails?.length > 0;

    if (hasVariation && hasVariationAddons) {
      this.itemType = 'variation-addon';
    } else if (hasVariation) {
      this.itemType = 'variation';
    } else if (hasAddons) {
      this.itemType = 'addon';
    } else {
      this.itemType = 'basic';
    }
  }

  private initializeItemDetails() {
    this.item_name = this.item.item_name;
    this.description = this.item.item_description;
    this.price = this.item.price;
    this.total_price = this.price;
    
    if (typeof this.item.nutrition === 'string') {
      try {
        this.parsedNutrition = JSON.parse(this.item.nutrition);
        this.nutrition = `${this.parsedNutrition?.["calories"]?.amount} ${this.parsedNutrition?.["calories"]?.unit} - ${this.parsedNutrition?.["protien"]?.amount}${this.parsedNutrition?.["protien"]?.unit}`;
      } catch (e) {
        console.error('Error parsing nutrition:', e);
        this.nutrition = '';
      }
    } else if (this.item.nutrition) {
      this.parsedNutrition = this.item.nutrition;
      this.nutrition = `${this.parsedNutrition?.["calories"]?.amount} ${this.parsedNutrition?.["calories"]?.unit} - ${this.parsedNutrition?.["protien"]?.amount}${this.parsedNutrition?.["protien"]?.unit}`;
    }
  }

  private initializeVariations() {
    if (this.item?.variation) {
      // Get unique variations based on variationid
      this.uniqueVariations = Array.from(
        new Map(
          this.item.variation.map(item => [item.variationid, item])
        ).values()
      );

      // Auto-select the first variation
      if (this.uniqueVariations.length > 0) {
        this.onVariationSelect(this.uniqueVariations[0]);
      }
    }
  }

  private initializePrice() {
    this.totalPrice = parseFloat(this.item.price) || 0;
  }

  calculateTotalPrice(): number {
    let total = 0;
    
    if (this.itemType === 'basic') {
      total = parseFloat(this.item.price);
    } else if (this.selectedVariation) {
      total = parseFloat(this.selectedVariation.price);
    }

    // Add addon prices
    // this.selectedAddons.forEach(addon => {
    //   total += parseFloat(addon.addonitem_price);
    // });

    return total * this.quantity;
  }

  handleAddToCart(event: Event): void {
    event.stopPropagation();

    const variation = this.selectedVariation?.id || '';
    const addons = Object.values(this.selectedAddons).flat();
    this.cartService.addToCart(
      this.item,
      variation,
      addons
    ).subscribe();

    // this.addToCart.emit(cartItem);
    // this.close.emit();

  }

  onVariationSelect(variation: Variation): void {
    this.selectedVariation = variation;
    this.variation_name = variation.name;
    this.price = variation.price;
    this.updateTotalPrice();
  }

  private updateTotalPrice() {
    if (this.selectedVariation) {
      this.totalPrice = parseFloat(this.selectedVariation.price) || 0;
    }
  }

  getAddonSelectionMin(addonGroupId: string): string {
    const addon = this.item?.addon?.find(a => a.addon_group_id === addonGroupId);
    return addon?.addon_item_selection_min || '0';
  }

  getVariationAddons(variation: Variation | null): AddonDetail[] {
    if (!variation || !this.item.variationAddonDetails) return [];
    return this.item.variationAddonDetails.filter(addondetail => 
      addondetail.variation_ids?.includes(variation.id)
    );
  }
  
  getRegularAddons(): AddonDetail[] {
    if (!this.item.addon || !this.item.addonDetails) return [];
    return this.item.addonDetails.filter(addon =>
      this.item.addon.some(a => a.addon_group_id === addon.addon_group_id)
    );
  }
  
  getSelectedCount(addonGroup: AddonDetail): number {
    // TODO: Implement actual count logic
    return 0;
  }

  getAddonMaxLimit(addonGroup: any, variation?: Variation | null): number {
    if (variation) {
      // For variation addons
      const addon = variation.addon;
      return addon?.addon_item_selection_max ? Number(addon.addon_item_selection_max) : 1;
    } else {
      // For regular addons
      const addon = this.item.addon?.find(a => a.addon_group_id === addonGroup.addon_group_id);
      return addon?.addon_item_selection_max ? Number(addon.addon_item_selection_max) : 1;
    }
  }

  getAddonMinLimit(addonGroup: any, variation?: Variation | null): number {
    if (variation) {
      // For variation addons
      const addon = variation.addon;
      return addon?.addon_item_selection_min ? Number(addon.addon_item_selection_min) : 0;
    } else {
      // For regular addons
      const addon = this.item.addon?.find(a => a.addon_group_id === addonGroup.addon_group_id);
      return addon?.addon_item_selection_min ? Number(addon.addon_item_selection_min) : 0;
    }
  }

  hasOnlyVariations(): boolean {
    return this.item?.variation?.length > 0 && 
           (!this.item?.variationAddonDetails || this.item.variationAddonDetails.length === 0);
  }

  hasVariationsWithAddons(): boolean {
    return this.item?.variation?.length > 0 && 
           this.item?.variationAddonDetails && 
           this.item.variationAddonDetails.length > 0;
  }

  hasOnlyAddons(): boolean {
    return (!this.item?.variation || this.item.variation.length === 0) && 
           this.item?.addon && 
           this.item.addon.length > 0;
  }

  private hasVariations(): boolean {
    return this.item.variation?.length > 0;
  }

  onTotalPriceChanged(newTotal: number) {
    this.totalPrice = newTotal;
  }

  onPriceUpdated(price: number) {
    this.totalPrice = price;
  }

  updateQuantity() {
    this.cartService.cartItems$.subscribe(cartItems => {
      const cartItem = cartItems.find(cartItem => 
        cartItem.item_id === this.item.item_id
      );
      this.quantity = cartItem ? cartItem.quantity : 0;
    });
  }

  
  incrementQuantity(event: Event) {
    event.stopPropagation();   

    this.cartService.getCartItems().subscribe(cartItemsincrementQuantity => {
      const cartItem = cartItemsincrementQuantity.results.find((cartItemincrementQuantity: any) => 
         cartItemincrementQuantity.items_details._id === this.item._id
      );
      if(!cartItem){
        this.toast.error('item not found in cart')
      }
      this.cartService.updateQuantity(cartItem?._id, this.quantity + 1).subscribe();
    });
  }

  decrementQuantity(event: Event) {
    event.stopPropagation();
    if (this.quantity > 0) {
      this.cartService.getCartItems().subscribe(cartItemsdecrementQuantity => {
        const cartItem = cartItemsdecrementQuantity.results.find((cartItemsdecrementQuantity: any) => 
           cartItemsdecrementQuantity.items_details._id === this.item._id
        );
        if(!cartItem){
          this.toast.error('item not found in cart')
        }
        this.cartService.updateQuantity(cartItem?._id, this.quantity - 1).subscribe();
      });
    }
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/food/variation-addon-selector/variation-addon-selector.component.html">
<div class="mx-[3.8%] mb-2">
  <!-- Variations Section -->
  <div class="rounded-[10px] border-2 border-[hsl(var(--border))] mb-2">
    <div class="flex justify-between items-center border-b-2 border-[hsl(var(--border))] py-[1%] cursor-pointer">
      <p class="px-[16px]">Variation</p>
      <p class="px-[16px]">
        <svg width="12" height="8" viewBox="0 0 12 8" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M0.599927 6.99625C0.866626 7.26791 1.29903 7.26791 1.56573 6.99625L5.9999 2.47945L10.4341 6.99625C10.7008 7.26791 11.1332 7.26791 11.3999 6.99625C11.6666 6.72458 11.6666 6.28411 11.3999 6.01244L6.4828 1.00375C6.21611 0.732079 5.7837 0.732079 5.517 1.00375L0.599927 6.01244C0.333227 6.28411 0.333227 6.72458 0.599927 6.99625Z" fill="#0C1D2E"/>
        </svg>
      </p>
    </div>
    <div class="overflow-y-auto max-h-[150px] px-[16px]">
      <div *ngFor="let variation of uniqueVariations" class="flex justify-between items-center py-1">
        <span class="cursor-pointer" [class.text-[var(--temp-back)]]="variation === selectedVariation">
          <input type="radio" 
                 [checked]="variation === selectedVariation"
                 (click)="onSelect(variation)" 
                 class="mr-2">
          {{variation.name}}
        </span>
        <span class="text-gray-500 flex items-center">
          <div class="font-[550] pr-[2px]">INR</div>{{variation.price}}
        </span>
      </div>
    </div>
  </div>

  <!-- Variation Addons Section -->
  <div *ngIf="selectedVariation?.variationallowaddon === 1">
    <div *ngFor="let addonGroup of getVariationAddons(selectedVariation)" class="rounded-[10px] border-2 mb-4 border-[hsl(var(--border))]">
      <div class="flex item-center flex-col border-b-2 py-[1%] px-4 border-[hsl(var(--border))]">
        <div class="flex justify-between items-center cursor-pointer">
          <p>{{addonGroup.addon_group_name}}</p>
          <div class="flex items-center gap-4">
            <p class="text-gray-500 text-sm">
              ({{selectedAddons[addonGroup.addon_group_id]?.length || 0}}/{{getAddonMaxLimit(addonGroup)}})
            </p>
            <p>
              <svg width="12" height="8" viewBox="0 0 12 8" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M0.599927 6.99625C0.866626 7.26791 1.29903 7.26791 1.56573 6.99625L5.9999 2.47945L10.4341 6.99625C10.7008 7.26791 11.1332 7.26791 11.3999 6.99625C11.6666 6.72458 11.6666 6.28411 11.3999 6.01244L6.4828 1.00375C6.21611 0.732079 5.7837 0.732079 5.517 1.00375L0.599927 6.01244C0.333227 6.28411 0.333227 6.72458 0.599927 6.99625Z" fill="#0C1D2E"/>
              </svg>
            </p>
          </div>
        </div>
        <div *ngIf="getAddonMinLimit(addonGroup) > 0" class="text-xs text-gray-500 flex items-end justify-end">
          Select at least {{getAddonMinLimit(addonGroup)}} option
        </div>
      </div>
      <div class="px-[16px] py-[1px] max-h-[20vh] custom-scrollbar overflow-y-auto">
        <div *ngFor="let item of addonGroup.addon_group_items" 
             class="flex justify-between relative items-center mb-1">
          <div class="flex items-center">
            <input type="checkbox" 
                   [id]="'addon-' + addonGroup.addon_group_id + '-' + item.addonitemid"
                   [checked]="isAddonSelected(addonGroup, item.addonitemid)"
                   (click)="onAddonSelect(addonGroup, item.addonitemid)"
                   class="mr-2">
            <label [for]="'addon-' + addonGroup.addon_group_id + '-' + item.addonitemid" 
                   class="cursor-pointer">
              {{item.addonitem_name}}
            </label>
          </div>
          <div class="text-gray-500 flex items-center">
            <div class="font-[550] pr-[2px]">INR</div>{{item.addonitem_price}}
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Validation Message -->
  <!-- <div *ngIf="validationService.currentMessage | async as message" 
       class="text-red-500 mt-2 px-4">
    {{ message }}
  </div> -->
</div> 
</boltAction>

<boltAction type="file" filePath="src/app/components/food/variation-addon-selector/variation-addon-selector.component.ts">
import { Component, Input, Output, EventEmitter, OnInit, OnChanges, SimpleChanges } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FoodItem, Variation, VariationAddon, AddonDetail, AddonGroupItem, AddonGroup } from '../../../interfaces/food.interface';
import { ValidationService } from '../../../services/validation.service';

@Component({
  selector: 'app-variation-addon-selector',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './variation-addon-selector.component.html'
})
export class VariationAddonSelectorComponent implements OnInit, OnChanges {
  @Input() item!: FoodItem;
  @Input() selectedVariation: Variation | null = null;
  @Input() variationAddonDetails: AddonGroup[] = [];
  @Output() variationSelected = new EventEmitter<Variation>();
  @Output() addonSelected = new EventEmitter<{groupId: string, itemId: string}>();
  @Output() validationChanged = new EventEmitter<boolean>();
  @Output() priceUpdated = new EventEmitter<number>();
  
  uniqueVariations: Variation[] = [];
  public selectedAddons: { [key: string]: string[] } = {};
  disabledDetails: { [key: string]: { currentSelectedCount: number, disabled: boolean } } = {};
  totalPrice: number = 0;

  constructor(public validationService: ValidationService) {}

  ngOnInit() {
    this.initializeVariations();
    this.validateSelections();
  }

  ngOnChanges(changes: SimpleChanges) {
    console.log('Changes detected:', changes);
    
    // Check if relevant inputs have changed
    if (changes['selectedVariation'] || changes['variationAddonDetails'] || changes['item']) {
      console.log('Relevant changes detected, validating...');
      this.validateSelections();
    }
  }

  private initializeVariations() {
    if (this.item?.variation) {
      // Group variations by variationid to get unique variations
      const variationMap = new Map();
      this.item.variation.forEach(variation => {
        if (!variationMap.has(variation.variationid)) {
          variationMap.set(variation.variationid, variation);
        }
      });
      this.uniqueVariations = Array.from(variationMap.values());

      // Select first variation by default if there's only one
      // if (this.uniqueVariations.length === 1) {
        this.onSelect(this.uniqueVariations[0]);
      // }
    }
  }

  onSelect(variation: Variation) {
    this.selectedVariation = variation;
    this.variationSelected.emit(variation);
    this.selectedAddons = {}; // Reset addons when variation changes
    this.calculateTotalPrice();
    this.validateSelections();
  }

  getVariationAddons(variation: Variation | null): AddonDetail[] {
    if (!variation || !this.item.variationAddonDetails) return [];
    return this.item.variationAddonDetails.filter(addonDetail => 
      addonDetail.variation_ids?.includes(variation.id)
    );
  }

  getAddonMaxLimit(addonGroup: AddonDetail): number {
    if (!this.selectedVariation) return 0;
    const addonConfig = this.findAddonConfig(addonGroup.addon_group_id);
    return addonConfig ? Number(addonConfig.addon_item_selection_max) : 1;
  }

  getAddonMinLimit(addonGroup: AddonDetail): number {
    if (!this.selectedVariation) return 0;
    const addonConfig = this.findAddonConfig(addonGroup.addon_group_id);
    return addonConfig ? Number(addonConfig.addon_item_selection_min) : 0;
  }

  private findAddonConfig(groupId: string) {
    if (!this.selectedVariation?.addon) return null;
    return Array.isArray(this.selectedVariation.addon) 
      ? this.selectedVariation.addon.find(a => a.addon_group_id === groupId)
      : this.selectedVariation.addon;
  }

  onAddonSelect(addonGroup: AddonDetail, addonItemId: string) {
    if (!this.selectedAddons[addonGroup.addon_group_id]) {
      this.selectedAddons[addonGroup.addon_group_id] = [];
    }

    const currentSelections = this.selectedAddons[addonGroup.addon_group_id];
    const maxLimit = this.getAddonMaxLimit(addonGroup);

    if (currentSelections.includes(addonItemId)) {
      // Remove if already selected
      this.selectedAddons[addonGroup.addon_group_id] = currentSelections.filter(id => id !== addonItemId);
    } else if (currentSelections.length < maxLimit) {
      // Add if under limit
      this.selectedAddons[addonGroup.addon_group_id].push(addonItemId);
    }

    this.calculateTotalPrice();
    this.validateSelections();
  }

  isAddonSelected(addonGroup: AddonDetail, addonItemId: string): boolean {
    return this.selectedAddons[addonGroup.addon_group_id]?.includes(addonItemId) || false;
  }

  private validateSelections() {
    if (!this.selectedVariation || !this.selectedVariation.addon) {
      this.validationService.updateMessage('');
      return;
    }

    const addons = Array.isArray(this.selectedVariation.addon) 
      ? this.selectedVariation.addon 
      : [this.selectedVariation.addon];

    for (const addonConfig of addons) {
      const currentCount = this.selectedAddons[addonConfig.addon_group_id]?.length || 0;
      const min = Number(addonConfig.addon_item_selection_min);
      const max = Number(addonConfig.addon_item_selection_max);

      if (currentCount < min) {
        const group = this.item.variationAddonDetails.find(
          g => g.addon_group_id === addonConfig.addon_group_id
        );
        if (group) {
          this.validationService.updateMessage(
            `Please select at least ${min} items from ${group.addon_group_name}`
          );
          return;
        }
      }
    }

    this.validationService.updateMessage('');
  }

  get hasVariations(): boolean {
    return this.item?.variation?.length > 0;
  }

  get hasVariationAddons(): boolean {
    return this.item?.variationAddonDetails?.length > 0;
  }

  getUniqueVariations() {
    if (!this.item?.variation) return [];
    return Array.from(
      new Map(this.item.variation.map(item => [item.variationid, item])).values()
    );
  }

  onVariationSelect(variation: any) {
    this.selectedVariation = variation;
    this.selectedAddons = {}; // Reset addons when variation changes
    this.validateSelections();
  }

  isAddonGroupValidForVariation(addonGroup: any, variation: any): boolean {
    return addonGroup.variation_ids?.includes(variation.id);
  }

  getMinMaxText(variation: any, groupId: string): string {
    const addon = variation.addon;
    if (!addon) return '';
    const addonConfig = addon.find((a: any) => a.addon_group_id === groupId);
    if (!addonConfig) return '';
    return `${addonConfig.addon_item_selection_min} - ${addonConfig.addon_item_selection_max} items`;
  }

  isAddonDisabled(groupId: string): boolean {
    if (!this.selectedVariation) return true;
    const addon = this.selectedVariation.addon;
    if (!addon) return true;
    return true;
    // const addonConfig = addon.find((a: any) => a.addon_group_id === groupId);
    // if (!addonConfig) return true;
    
    // const currentCount = this.selectedAddons[groupId]?.length || 0;
    // return currentCount >= parseInt(addonConfig.addon_item_selection_max);
  }

  private calculateTotalPrice() {
    let total = 0;

    // Add variation price
    if (this.selectedVariation) {
      total += parseFloat(this.selectedVariation.price);
    }

    // Add addon prices
    Object.entries(this.selectedAddons).forEach(([groupId, selectedIds]) => {
      const addonGroup = this.item.variationAddonDetails?.find(
        group => group.addon_group_id === groupId
      );

      if (addonGroup) {
        selectedIds.forEach(addonId => {
          const addonItem = addonGroup.addon_group_items.find(
            item => item.addonitemid === addonId
          );
          if (addonItem) {
            total += parseFloat(addonItem.addonitem_price);
          }
        });
      }
    });

    this.priceUpdated.emit(total);
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/food/variation-selector/variation-selector.component.html">
<div class="mx-[3.8%] mb-2">
  <div class="rounded-[10px] border-2 border-[hsl(var(--border))] mb-2">
    <div class="flex justify-between items-center border-b-2 border-[hsl(var(--border))] py-[1%] cursor-pointer">
      <p class="px-[16px]">Variation</p>
      <p class="px-[16px]">
        <svg width="12" height="8" viewBox="0 0 12 8" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M0.599927 6.99625C0.866626 7.26791 1.29903 7.26791 1.56573 6.99625L5.9999 2.47945L10.4341 6.99625C10.7008 7.26791 11.1332 7.26791 11.3999 6.99625C11.6666 6.72458 11.6666 6.28411 11.3999 6.01244L6.4828 1.00375C6.21611 0.732079 5.7837 0.732079 5.517 1.00375L0.599927 6.01244C0.333227 6.28411 0.333227 6.72458 0.599927 6.99625Z" fill="#0C1D2E"/>
        </svg>
      </p>
    </div>
    <div class="overflow-y-auto max-h-[150px] px-[16px]">
      <div *ngFor="let variation of uniqueVariations" 
           class="flex justify-between items-center py-1">
        <span class="cursor-pointer" 
              [class.text-[var(--temp-back)]]="variation === selectedVariation">
          <input type="radio" 
                 [checked]="variation === selectedVariation"
                 (click)="onSelect(variation)" 
                 class="mr-2">
          {{variation.name}}
        </span>
        <span class="text-gray-500 flex items-center">
          <div class="font-[550] pr-[2px]">INR</div>{{variation.price}}
        </span>
      </div>
    </div>
  </div>
</div> 
</boltAction>

<boltAction type="file" filePath="src/app/components/food/variation-selector/variation-selector.component.ts">
import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FoodItem, Variation } from '../../../interfaces/food.interface';
import { ValidationService } from '../../../services/validation.service';

@Component({
  selector: 'app-variation-selector',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './variation-selector.component.html'
})
export class VariationSelectorComponent implements OnInit {
  @Input() item!: FoodItem;
  @Input() selectedVariation: Variation | null = null;
  @Output() variationSelected = new EventEmitter<Variation>();
  @Output() priceUpdated = new EventEmitter<number>();
  
  uniqueVariations: Variation[] = [];

  constructor(private validationService: ValidationService) {}

  ngOnInit() {
    this.initializeVariations();
  }

  private initializeVariations() {
    if (this.item?.variation) {
      this.uniqueVariations = Array.from(
        new Map(this.item.variation.map(item => [item.variationid, item])).values()
      );
      
      if (this.uniqueVariations.length > 0 && !this.selectedVariation) {
        this.onSelect(this.uniqueVariations[0]);
      }
    }
  }

  onSelect(variation: Variation) {
    this.selectedVariation = variation;
    this.validationService.clearMessage();
    this.variationSelected.emit(variation);
    this.priceUpdated.emit(parseFloat(variation.price));
  }

  validateSelection(): boolean {
    return this.validationService.validateVariationSelection(this.selectedVariation);
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/header/cart-popup/cart-popup.component.html">
<div class="fixed inset-0 flex backdrop-blur-[2px] bg-black/50 z-50">
    <div class="cart-popup-content absolute bottom-0 lg:bottom-auto lg:right-12 lg:top-14 bg-white rounded-[10px] xl:min-w-[30%] xl:max-w-[30%] lg:min-w-[35%] lg:max-w-[35%] min-w-full shadow-lg">
      <h1 class="p-4 sm:p-6 lg:hidden text-[16px] sm:text-[18px] block border-b-[1px] border-[hsl(var(--border))]">Cart</h1>
      <button (click)="cartPopupService.close()" 
              class="absolute sm:w-[30px] sm:h-[30px] top-4 sm:top-6 lg:top-0 w-5 h-5 lg:-right-9 sm:right-6 right-4 lg:bg-[#0C1D2E] opacity-70 lg:text-white font-bold flex items-center justify-center rounded-full">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M18.3 5.71001C18.2075 5.61731 18.0976 5.54376 17.9766 5.49358C17.8556 5.4434 17.7259 5.41757 17.595 5.41757C17.464 5.41757 17.3343 5.4434 17.2134 5.49358C17.0924 5.54376 16.9825 5.61731 16.89 5.71001L12 10.59L7.10998 5.70001C7.0174 5.60743 6.90749 5.53399 6.78652 5.48388C6.66556 5.43378 6.53591 5.40799 6.40498 5.40799C6.27405 5.40799 6.1444 5.43378 6.02344 5.48388C5.90247 5.53399 5.79256 5.60743 5.69998 5.70001C5.6074 5.79259 5.53396 5.9025 5.48385 6.02347C5.43375 6.14443 5.40796 6.27408 5.40796 6.40501C5.40796 6.53594 5.43375 6.66559 5.48385 6.78655C5.53396 6.90752 5.6074 7.01743 5.69998 7.11001L10.59 12L5.69998 16.89C5.6074 16.9826 5.53396 17.0925 5.48385 17.2135C5.43375 17.3344 5.40796 17.4641 5.40796 17.595C5.40796 17.7259 5.43375 17.8556 5.48385 17.9766C5.53396 18.0975 5.6074 18.2074 5.69998 18.3C5.79256 18.3926 5.90247 18.466 6.02344 18.5161C6.1444 18.5662 6.27405 18.592 6.40498 18.592C6.53591 18.592 6.66556 18.5662 6.78652 18.5161C6.90749 18.466 7.0174 18.3926 7.10998 18.3L12 13.41L16.89 18.3C16.9826 18.3926 17.0925 18.466 17.2134 18.5161C17.3344 18.5662 17.464 18.592 17.595 18.592C17.7259 18.592 17.8556 18.5662 17.9765 18.5161C18.0975 18.466 18.2074 18.3926 18.3 18.3C18.3926 18.2074 18.466 18.0975 18.5161 17.9766C18.5662 17.8556 18.592 17.7259 18.592 17.595C18.592 17.4641 18.5662 17.3344 18.5161 17.2135C18.466 17.0925 18.3926 16.9826 18.3 16.89L13.41 12L18.3 7.11001C18.68 6.73001 18.68 6.09001 18.3 5.71001Z" fill="currentColor"/>
        </svg>
      </button>
  
      @if (loading) {
        <div class="flex justify-center items-center p-10">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
        </div>
      } @else if (items.length === 0) {
        <div class="text-center py-10 lg:py-10 sm:py-32">
          <p>Your cart is empty. Add something <br /> from the menu</p>
        </div>
      } @else {
        <div class="px-4 sm:px-8 lg:px-4 max-h-[40vh] sm:max-h-[25vh] lg:max-h-[65vh] overflow-y-auto custom-scrollbar">
          @for (item of items; track item._id; let i = $index) {
            <div class="pt-3 sm:py-6 lg:py-3 items-center border-b-[1px] border-[hsl(var(--border))] relative">
              <div class="flex">
                <div class="hidden sm:block">
                  <img [src]="'https://i.ibb.co/xqPd88kG/broken-Image-Menu-CM38dt-NR.jpg'" 
                       class="min-w-[6rem] max-w-[6rem] h-[4rem] rounded-md object-cover" 
                       [alt]="item.items_details['item_name']">
                </div>
                <div class="flex flex-col flex-grow sm:ml-4">
                  <div class="flex justify-between items-center">
                    <div class="flex items-center space-x-2">
                      <div [class]="item.items_details['item_attribute_id'] === '1' ? 
                                     'h-4 w-4 border border-green-600 flex items-center justify-center cursor-pointer' : 
                                     'h-4 w-4 border border-red-600 flex items-center justify-center cursor-pointer'">
                        <div [class]="item.items_details['item_attribute_id'] === '1' ? 
                                      'h-2 w-2 bg-green-600 rounded-full' : 
                                      'h-2 w-2 bg-red-600 rounded-full'"></div>
                      </div>
                      <p class="text-[#748BA0] text-[13px] font-medium items-center">
                        {{ item.items_details['item_name'] }}
                        @if (item.variation) {
                          <span class="text-[12px] text-gray-500">({{ item.variation }})</span>
                        }
                      </p>
                    </div>
                    <div class="hidden lg:block">
                      <div class="flex gap-[20px]">
                        <button (click)="toggleNotes(i)" 
                                [class.text-blue-500]="visibleNoteIndex === i"
                                class="cursor-pointer">
                            <!-- Note icon SVG path -->
                            <item-note-icon></item-note-icon>
                        </button>
                        <button (click)="removeItem(item._id)" class="cursor-pointer">
                            <item-delete-icon></item-delete-icon>
                        </button>
                      </div>
                    </div>
                    <p class="font-semibold flex items-center text-[14px] lg:hidden">
                      <span class="font-[550] pr-[2px]">INR</span> {{ item.total }}
                    </p>
                  </div>
  
                  <div class="flex justify-between items-center my-2">
                    <div class="flex items-center space-x-2">
                      <button (click)="updateQuantity(item._id, item.quantity - 1)" 
                              class="cursor-pointer" 
                              [disabled]="item.quantity <= 1">
                        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 30 30" fill="none">
                          <rect width="30" height="30" rx="15" fill="#E6F3F8"/>
                          <path d="M8.75 15H21.25" stroke="#0C1D2E" stroke-width="1.71429" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                      </button>
  
                      <span class="custom-input font-semibold flex items-center text-center text-[14px] text-[#748BA0] min-w-[24px]">
                        {{ item.quantity }}
                      </span>
  
                      <button (click)="updateQuantity(item._id, item.quantity + 1)" 
                              class="cursor-pointer">
                        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 30 30" fill="none">
                          <rect width="30" height="30" rx="15" fill="#E6F3F8"/>
                          <path d="M15 8.75V21.25" stroke="#0C1D2E" stroke-width="1.71429" stroke-linecap="round" stroke-linejoin="round"/>
                          <path d="M8.75 15H21.25" stroke="#0C1D2E" stroke-width="1.71429" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                      </button>
                    </div>
                    <div class="hidden lg:block">
                      <p class="items-center text-[14px] text-center text-[#748BA0]">
                        x{{ item.total }}
                      </p>
                    </div>
                    <div class="hidden lg:block">
                      <p class="font-semibold flex items-center text-[14px]">
                        <span class="font-[550] pr-[2px]">INR</span> {{ item.total }}
                      </p>
                    </div>
                    <div class="flex gap-[20px] sm:pt-3 lg:hidden">
                      <button (click)="toggleNotes(i)" 
                              [class.text-blue-500]="visibleNoteIndex === i"
                              class="cursor-pointer">
                        <svg width="19" height="21" viewBox="0 0 19 21" fill="var(--temp-back)" xmlns="http://www.w3.org/2000/svg">
                          <!-- Note icon SVG path -->
                        </svg>
                      </button>
                      <button (click)="removeItem(item._id)" class="cursor-pointer">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                          <!-- Delete icon SVG path -->
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
  
              @if (visibleNoteIndex === i) {
                <div class="mt-2 p-2 bg-[#E6F3F8] rounded-[10px]">
                  <textarea [(ngModel)]="item.notes" 
                            (ngModelChange)="onNotesChange(item)"
                            class="w-full pt-2 px-4 outline-none text-[14px] resize-none bg-[#E6F3F8] rounded-[10px]"
                            rows="3"
                            placeholder="Add special Notes"></textarea>
                </div>
              }
            </div>
          }
        </div>
  
        <hr class="mt-1 block sm:hidden lg:block border-[hsl(var(--border))]">
  
        <div class="mx-4 sm:mx-8 lg:mx-4 mt-2 sm:mb-6 lg:mb-2">
          <p class="text-[11px] text-[var(--temp-back)] pl-2 flex">
            Minimum order amount is 200
          </p>
          <textarea 
            class="bg-[#E6F3F8] rounded-[10px] w-full pt-2 px-4 outline-none text-[14px] resize-none"
            rows="3"
            [(ngModel)]="orderNotes"
            (ngModelChange)="onOrderNotesChange($event)"
            placeholder="Add special Notes">
          </textarea>
        </div>
  
        <div class="border-t-[1px] border-[hsl(var(--border))] bg-white rounded-b-[10px] flex justify-between py-[8px] sm:py-6 lg:py-2 px-[24px] mb-5 lg:mb-0">
          <div class="w-full hidden lg:block">
            <div class="flex flex-wrap items-center gap-1">
              <p class="text-[14px] text-[#748BA0]">Subtotal : </p>
              <p class="font-bold text[20px] flex items-center">
                <span class="font-[550] pr-[2px]">INR</span>
                {{ calculateTotal() }}
              </p>
            </div>
            <p class="text-[10px] text-[#748BA0]">Extra charges may apply</p>
          </div>
          <div class="w-full lg:hidden">
            <div class="flex flex-wrap items-center gap-1">
              <p class="text-[14px] text-[#748BA0]">Total</p>
            </div>
            <p class="font-bold text-[16px] sm:text-[20px] lg:text-[16px] flex items-center">
              <span class="font-[550] pr-[2px]">INR</span>
              {{ calculateTotal() }}
            </p>
          </div>
          <button (click)="handleCheckout()" class="px-8 w-full rounded-[10px] text-[16px] font-bold bg-[var(--temp-back)] text-white">
            Checkout
          </button>
        </div>
      }
    </div>
 

  <!-- <!-  -->
 
  <!-- - Add mobile version of notes and delete buttons -->
 
</div> 
</boltAction>

<boltAction type="file" filePath="src/app/components/header/cart-popup/cart-popup.component.ts">
import { Component, inject, OnInit, OnDestroy } from '@angular/core';
import { CommonModule, CurrencyPipe } from '@angular/common';
import { CartService } from '../../../services/cart.service';
import { ThemeService } from '../../../services/theme.service';
import { Store } from '@ngrx/store';
import { FormsModule } from '@angular/forms';
// import { motion } from '@angular/platform-browser/animations';
import { firstValueFrom, Subscription, Subject, forkJoin } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { CartPopupService } from '../../../services/cart-popup.service';
import { CartItem } from '../../../interfaces/cart.interface';
import { ItemNoteIconComponent, ItemDeleteIconComponent, CartIconComponent } from '../../../icons/cartpop-icons.component';
import { Router } from '@angular/router';

@Component({
  selector: 'app-cart-popup',
  standalone: true,
  imports: [CommonModule, FormsModule, CurrencyPipe, ItemNoteIconComponent, ItemDeleteIconComponent, CartIconComponent],
  templateUrl: './cart-popup.component.html',
//   animations: [
//     motion.animation([
//       motion.style({ opacity: 0 }),
//       motion.animate('300ms ease-in', motion.style({ opacity: 1 }))
//     ])
//   ]
})
export class CartPopupComponent implements OnInit, OnDestroy {
  private cartService = inject(CartService);
  themeService = inject(ThemeService);
  private store = inject(Store);
  cartPopupService = inject(CartPopupService);
  router = inject(Router);

  items: CartItem[] = [];
  orderNotes = '';
  loading = false;
  visibleNoteIndex: number | null = null;
  storeId: string = '';
  reloadData: boolean = false;
  private subscription = new Subscription();
  private orderNotesSubject = new Subject<string>();

  // get storeId(): string {
  //   return this.themeService.store.store_id;
  // }

  ngOnInit() {
    this.themeService.getStore().subscribe(store => {
      if (store?.store_id) {
        this.storeId = store.store_id;
        this.loadCartData();
      }
    });
    document.body.style.overflow = 'hidden';
    // Subscribe to cart items updates
    this.subscription.add(
      this.cartService.cartItems$.subscribe(items => {
        this.items = items;
      })
    );

    // Add debounced order notes handler
    this.subscription.add(
      this.orderNotesSubject.pipe(
        debounceTime(500), // Wait 500ms after the last change
        distinctUntilChanged() // Only emit if value has changed
      ).subscribe(notes => {
        this.updateOrderNotes(notes);
      })
    );
  }

  ngOnDestroy() {
    document.body.style.overflow = 'auto';
    this.subscription.unsubscribe();
  }

  async handleCheckout() {
    // also close the cart popup
    this.cartPopupService.close();
    this.router.navigate(['/checkout']);
  }
  
  async loadCartData() {
    this.loading = true;
    try {
      // Make all three API calls in parallel
      const [orderNotes, cartItems, reloadCart] = await firstValueFrom(
        forkJoin([
          this.cartService.getOrderNotes(this.storeId),
          this.cartService.getItemCart(this.storeId),
          this.cartService.reloadCartItems(),
          this.cartService.getCartCount()
        ])
      );

      // Handle order notes response
      if (orderNotes?.results?.notes) {
        this.orderNotes = orderNotes.results.notes;
      }

      // Handle cart items response
      if (cartItems?.results) {
        this.items = cartItems.results;
        this.cartService.cartItemsSubject.next(cartItems.results);
      }

      // Handle reload cart response
      if (reloadCart?.results) {
        this.reloadData = true;
      }

    } catch (error) {
      console.error('Error loading cart data:', error);
    } finally {
      this.loading = false;
    }
  }

  async updateItemQuantity(item: CartItem, newQuantity: number) {
    if (!this.storeId) return;
    
    try {
      await firstValueFrom(this.cartService.updateQuantity(item._id, newQuantity));
      await this.loadCartData();
    } catch (error) {
      console.error('Error updating quantity:', error);
    }
  }

  removeItem(itemId: string) {
    if (!this.storeId) return;
    
    try {
      this.cartService.removeItemFromCart({
        storeId: this.storeId,
        cartProductId: itemId
      }).subscribe(() => {
        this.loadCartData();
      });
    } catch (error) {
      console.error('Error removing item:', error);
    }
  }

  async addNotes(itemId: string, notes: string) {
    if (!this.storeId) return;
    
    try {
      await firstValueFrom(this.cartService.addNotesToItem({
        storeId: this.storeId,
        item_id: itemId,
        notes: notes
      }));
      await this.loadCartData();
    } catch (error) {
      console.error('Error adding notes:', error);
    }
  }

  calculateTotal(): number {
    return this.items.reduce((sum, item) => sum + (item.total * item.quantity), 0);
  }

  toggleNotes(index: number) {
    this.visibleNoteIndex = this.visibleNoteIndex === index ? null : index;
  }

  handleClickOutside(event: MouseEvent) {
    const target = event.target as HTMLElement;
    if (target.classList.contains('cart-overlay')) {
      this.cartPopupService.close();
    }
  }

  onNotesChange(item: CartItem) {
    this.cartService.updateNotes(item._id, item.notes || '');
  }

  updateQuantity(itemId: string, quantity: number) {
    if (quantity > 0) {
      this.cartService.updateQuantity(itemId, quantity).subscribe();
    }
  }

  // Handle order notes changes
  onOrderNotesChange(notes: string) {
    this.orderNotesSubject.next(notes);
  }

  // Update order notes API call
  private async updateOrderNotes(notes: string) {
    if (!this.storeId) return;

    try {
      await firstValueFrom(this.cartService.addOrderNotes({
        storeId: this.storeId,
        notes: notes
      }));
    } catch (error) {
      console.error('Error updating order notes:', error);
    }
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/header/empty-cart/empty-cart.component.ts">
import { Component, EventEmitter, Output } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-empty-cart',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="fixed inset-0 bg-black bg-opacity-50 z-50">
      <div class="absolute right-0 top-0 h-full w-96 bg-white shadow-lg">
        <div class="p-4">
          <div class="flex justify-between items-center">
            <h2 class="text-lg font-semibold">Your Cart</h2>
            <button (click)="close.emit()" class="text-gray-500 hover:text-gray-700">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <path fill="currentColor" d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
              </svg>
            </button>
          </div>
          <div class="flex flex-col items-center justify-center h-[80vh]">
            <img src="assets/icons/empty-cart.svg" alt="Empty Cart" class="w-32 h-32 mb-4">
            <p class="text-gray-500">Your cart is empty</p>
          </div>
        </div>
      </div>
    </div>
  `
})
export class EmptyCartComponent {
  @Output() close = new EventEmitter<void>();
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/header/hammer-links/hammer-links.component.ts">
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-hammer-links',
  standalone: true,
  imports: [CommonModule],
  template: `
    <button 
      class="text-[var(--temp-back)]"
      (click)="toggleMenu()">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
        <path fill="currentColor" d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
      </svg>
    </button>

    @if (isOpen) {
      <div class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50">
        <!-- Add your menu items here -->
      </div>
    }
  `
})
export class HammerLinksComponent {
  isOpen = false;

  toggleMenu() {
    this.isOpen = !this.isOpen;
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/header/user-dropdown/user-dropdown.component.ts">
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { AuthService } from '../../../services/auth.service';
import { ToastService } from '../../../services/toast.service';

@Component({    
  selector: 'app-user-dropdown',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="fixed right-6 top-12 mt-2 w-[110px] bg-white rounded-md shadow-lg py-1 z-50">
      <button
        (click)="logout()"
        class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
      >
        Logout
      </button>
    </div>
  `
})
export class UserDropdownComponent {
  constructor(
    private router: Router,
    private authService: AuthService,
    private toast: ToastService
  ) {}

  logout() {
    this.authService.logout();
    this.router.navigate(['/']);
    // here show the snack bar message
    // update this to toast
    this.toast.success('Logged out successfully');
  }
} 
</boltAction>

<boltAction type="file" filePath="src/app/components/ui/toast/toast.component.ts">
import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ToastService, ToastData } from '../../../services/toast.service';
import { animate, style, transition, trigger } from '@angular/animations';

@Component({
  selector: 'app-toast',
  standalone: true,
  imports: [CommonModule],
  template: `
    <ol 
      class="fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]"
    >
      @for (toast of toasts; track toast.id) {
        <li 
          role="status" 
          aria-live="off" 
          aria-atomic="true" 
          tabindex="0" 
          data-state="open"
          class="group pointer-events-auto relative bg-white flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md p-4 pr-6 shadow-lg transition-all border bg-background text-foreground
                 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-80 
                 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full 
                 data-[state=open]:sm:slide-in-from-bottom-full"
          [class.bg-destructive]="toast.type === 'error'"
          @toastAnimation
        >
          <div class="grid gap-1 bg-white">
            @if (toast.type === 'success') {
              <div class="text-sm font-semibold [&+div]:text-xs">Success</div>
            } @else if (toast.type === 'error') {
              <div class="text-sm font-semibold text-destructive-foreground [&+div]:text-xs">Error</div>
            }
            <div class="text-sm opacity-90" [class.text-destructive-foreground]="toast.type === 'error'">
              {{ toast.message }}
            </div>
          </div>
          
          <button 
            type="button" 
            (click)="removeToast(toast.id)"
            class="absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity 
                   hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 
                   group-hover:opacity-100"
            [class.text-destructive-foreground]="toast.type === 'error'"
          >
            <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4">
              <path d="M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z" 
                    fill="currentColor" fill-rule="evenodd" clip-rule="evenodd">
              </path>
            </svg>
          </button>
        </li>
      }
    </ol>
  `,
  animations: [
    trigger('toastAnimation', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(100%)' }),
        animate('150ms ease-out', style({ opacity: 1, transform: 'translateY(0)' }))
      ]),
      transition(':leave', [
        animate('150ms ease-in', style({ opacity: 0, transform: 'translateX(100%)' }))
      ])
    ])
  ],
  styles: [`
    :host {
      --destructive: rgb(239 68 68);
      --destructive-foreground: white;
    }
  `]
})
export class ToastComponent implements OnInit, OnDestroy {
  toasts: (ToastData & { id: number })[] = [];
  private counter = 0;

  constructor(private toastService: ToastService) {}

  ngOnInit() {
    this.toastService.toast$.subscribe(data => {
      const id = this.counter++;
      this.toasts.push({ ...data, id });
      
      setTimeout(() => {
        this.removeToast(id);
      }, data.duration || 3000);
    });
  }

  removeToast(id: number) {
    this.toasts = this.toasts.filter(t => t.id !== id);
  }

  ngOnDestroy() {
    this.toasts = [];
  }
} 
</boltAction>

<boltAction type="shell">
npm i
</boltAction>

<boltAction type="shell">
npm run dev
</boltAction>

</boltArtifact>